{"version":3,"sources":["../../server/models/index.js"],"names":["fs","require","path","Sequelize","config","basename","module","filename","env","process","NODE_ENV","db","sequelize","use_env_variable","database","username","password","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","import","join","name","Object","keys","modelName","associate","exports"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,YAAYF,QAAQ,WAAR,CAAlB;AACAA,QAAQ,QAAR,EAAkBG,MAAlB;AACA,IAAMC,WAAWH,KAAKG,QAAL,CAAcC,OAAOC,QAArB,CAAjB;AACA,IAAMC,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;AACA,IAAMN,SAASH,QAAQ,qBAAR,EAA+BO,GAA/B,CAAf;AACA,IAAMG,KAAK,EAAX;;AAEA,IAAIC,kBAAJ;AACA,IAAIR,OAAOS,gBAAX,EAA6B;AACzBD,gBAAY,IAAIT,SAAJ,CAAcM,QAAQD,GAAR,CAAYJ,OAAOS,gBAAnB,CAAd,CAAZ;AACH,CAFD,MAEO;AACHD,gBAAY,IAAIT,SAAJ,CACRC,OAAOU,QADC,EACSV,OAAOW,QADhB,EAC0BX,OAAOY,QADjC,EAC2CZ,MAD3C,CAAZ;AAGH;;AAEDJ,GACKiB,WADL,CACiBC,SADjB,EAEKC,MAFL,CAEY;AAAA,WACPC,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IACCD,SAASf,QADV,IAECe,KAAKE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAHZ;AAAA,CAFZ,EAMKC,OANL,CAMa,gBAAQ;AACb,QAAMC,QAAQZ,UAAUa,MAAV,CAAiBvB,KAAKwB,IAAL,CAAUR,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAT,OAAGa,MAAMG,IAAT,IAAiBH,KAAjB;AACH,CATL;;AAWAI,OAAOC,IAAP,CAAYlB,EAAZ,EAAgBY,OAAhB,CAAwB,qBAAa;AACjC,QAAIZ,GAAGmB,SAAH,EAAcC,SAAlB,EAA6B;AACzBpB,WAAGmB,SAAH,EAAcC,SAAd,CAAwBpB,EAAxB;AACH;AACJ,CAJD;;AAMAA,GAAGC,SAAH,GAAeA,SAAf;AACAN,OAAO0B,OAAP,GAAiBrB,EAAjB","file":"index.js","sourcesContent":["const fs = require('fs');\r\nconst path = require('path');\r\nconst Sequelize = require('sequelize');\r\nrequire('dotenv').config();\r\nconst basename = path.basename(module.filename);\r\nconst env = process.env.NODE_ENV || 'development';\r\nconst config = require('../config/config.js')[env];\r\nconst db = {};\r\n\r\nlet sequelize;\r\nif (config.use_env_variable) {\r\n    sequelize = new Sequelize(process.env[config.use_env_variable]);\r\n} else {\r\n    sequelize = new Sequelize(\r\n        config.database, config.username, config.password, config\r\n    );\r\n}\r\n\r\nfs\r\n    .readdirSync(__dirname)\r\n    .filter(file =>\r\n    (file.indexOf('.') !== 0) &&\r\n    (file !== basename) &&\r\n    (file.slice(-3) === '.js'))\r\n    .forEach(file => {\r\n        const model = sequelize.import(path.join(__dirname, file));\r\n        db[model.name] = model;\r\n    });\r\n\r\nObject.keys(db).forEach(modelName => {\r\n    if (db[modelName].associate) {\r\n        db[modelName].associate(db);\r\n    }\r\n});\r\n\r\ndb.sequelize = sequelize;\r\nmodule.exports = db;"]}