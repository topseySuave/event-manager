{"version":3,"sources":["../../server/controllers/Events.js"],"names":["EventModel","Events","CenterModel","Centers","Op","sequelize","attributes","centersAttributes","req","res","eventId","parseInt","params","id","isNaN","status","send","statusCode","message","findOne","where","then","event","limitValue","query","limit","process","env","DATA_LIMIT","order","sort","findAll","startDate","gte","Date","toDateString","returnedEvent","events","catch","search","split","titleResp","map","title","iLike","value","or","searchResults","length","pageValue","next","findAndCountAll","include","model","as","offset","json","rows","meta","err","body","endDate","centerId","lte","result","create","img_url","description","userId","currentUser","error","findById","update","updatedEvent","newEvent","deletedEvent","destroy"],"mappings":"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","file":"Events.js","sourcesContent":["// import Sequelize from '../config';\nimport models from '../models';\nimport { generatePaginationMeta } from '../middleware/util';\n\nconst EventModel = models.Events;\nconst CenterModel = models.Centers;\nconst { Op } = models.sequelize;\nconst attributes = ['id', 'title', 'img_url', 'description', 'startDate', 'endDate', 'centerId'];\nconst centersAttributes = ['location'];\n\n/**\n * @export\n * @class Events\n */\nexport class Events {\n  /**\n     * Get a single Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  getEvent(req, res) {\n    const eventId = parseInt(req.params.id, 10);\n    if (isNaN(eventId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Event id is not a number'\n      });\n    }\n\n    EventModel.findOne({\n        where: {\n          id: eventId\n        },\n        attributes: attributes\n    })\n      .then((event) => {\n        if (!event) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: `Event with id: ${eventId} does not exist`\n          });\n        }\n        return res.status(200).send({\n          statusCode: 200,\n          message: `Event with id: ${eventId} was found`,\n          event\n        });\n      });\n  }\n\n  /**\n     * Get Multiple Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  getEvents(req, res) {\n    const limitValue = parseInt(req.query.limit, 10) || process.env.DATA_LIMIT;\n    const order = (req.query.order) ? req.query.order : 'desc';\n    if (req.query && req.query.sort) {\n      if (order) {\n        EventModel.findAll({\n          where: {\n            startDate: {\n              [Op.gte]: new Date().toDateString()\n            }\n          },\n          order: [\n            ['id', order]\n          ],\n          attributes: attributes\n        })\n          .then((returnedEvent) => {\n            if (!returnedEvent) {\n              return res.status(404).send({\n                statusCode: 404,\n                message: 'No Event found'\n              });\n            }\n\n            return res.status(200).send({\n              statusCode: 200,\n              message: 'Event(s) found',\n              events: returnedEvent\n            });\n          })\n          .catch(() => res.status(500).send({\n            statusCode: 500,\n            message: 'Error searching for Events'\n          }));\n      }\n    } else if (req.query.search || req.query.limit) {\n      const search = req.query.search.split(' ');\n\n      /**\n      * Search with Title But Map first\n      * */\n      const titleResp = search.map(value => ({\n        title: {\n          [Op.iLike]: `%${value}%`\n        }\n      }));\n\n      EventModel.findAll({\n        where: {\n          [Op.or]: titleResp,\n          startDate: {\n            [Op.gte]: new Date().toDateString()\n          }\n        },\n        order: [\n          ['id', order]\n        ],\n        limit: limitValue,\n        attributes\n      })\n        .then((searchResults) => {\n          if (searchResults.length <= 0) {\n            return res.status(404).send({\n              statusCode: 404,\n              message: 'Event(s) do not match your search result'\n            });\n          }\n          return res.status(200).send({\n            statusCode: 200,\n            message: 'The Events found',\n            events: searchResults\n          });\n        });\n    } else {\n      const pageValue = req.query.next || 0;\n      EventModel.findAndCountAll({\n        where: {\n          startDate: {\n            [Op.gte]: new Date().toDateString()\n          }\n        },\n        attributes: attributes,\n        include: [{\n          model: CenterModel,\n          as: 'center',\n          attributes: centersAttributes\n        }],\n        order: [\n          ['id', order]\n        ],\n        limit: limitValue,\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\n      })\n        .then((events) => {\n          if (events.length === 0) {\n            return res.status(404).send({\n              statusCode: 404,\n              message: 'No result found',\n            });\n          }\n\n          res.status(200).json({\n            statusCode: 200,\n            message: 'Successful Events!',\n            events: events.rows,\n            meta: generatePaginationMeta(events, limitValue, pageValue)\n          });\n        })\n        .catch(err => res.status(500).send(err));\n    }\n  }\n\n  /**\n     * Create Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  createEvent(req, res) {\n    const startDate = new Date(req.body.startDate);\n    const endDate = new Date(req.body.endDate);\n\n    // noinspection JSDuplicatedDeclaration\n    EventModel.findOne({\n      where: {\n        centerId: req.body.centerId,\n        startDate: {\n          [Op.lte]: endDate,\n          [Op.lte]: startDate\n        },\n        endDate: {\n          [Op.gte]: startDate,\n          [Op.gte]: endDate\n        }\n      }\n    })\n      .then((result) => {\n        if (result !== null) {\n          return res.send({\n            message: 'Center has been booked for this date',\n            statusCode: 400\n          });\n        }\n        return EventModel.create({\n          title: req.body.title,\n          img_url: req.body.img_url,\n          description: req.body.description,\n          startDate,\n          endDate,\n          centerId: parseInt(req.body.centerId, 10),\n          userId: parseInt(req.currentUser.id, 10),\n        })\n          .then((event) => {\n            res.status(200).send({\n              statusCode: 200,\n              message: 'Event has been created',\n              event\n            });\n          })\n          .catch(err => res.status(500).send({\n            statusCode: 500,\n            message: 'Event cannot be created',\n            error: err\n          }));\n      })\n      .catch((err) => {\n        res.status(500).send({\n          statusCode: 500,\n          message: 'Event cannot be created',\n          error: err\n        });\n      });\n  }\n\n  /**\n     * Update a single Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  updateEvent(req, res) {\n    const eventId = parseInt(req.params.id, 10);\n    if (isNaN(eventId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Event id is not a number'\n      });\n    }\n\n    EventModel.findById(eventId)\n      .then((event) => {\n        if (!event) {\n          return res.status(400).send({\n            statusCode: 400,\n            message: `Event not Found with ${eventId}`\n          });\n        }\n\n        EventModel.update(\n          {\n            title: req.body.title || event.title,\n            img_url: req.body.img_url || event.img_url,\n            description: req.body.description || event.description,\n            startDate: req.body.startDate || event.startDate,\n            endDate: req.body.endDate || event.endDate,\n            centerId: parseInt(req.body.centerId, 10) || event.centerId,\n            userId: parseInt(req.body.userId, 10) || event.userId,\n          },\n          {\n            where: {\n              id: eventId\n            }\n          }\n        )\n          .then((updatedEvent) => {\n            if (updatedEvent) {\n              EventModel.findById(eventId, {\n                include: [{\n                  model: CenterModel,\n                  as: 'center',\n                  attributes: centersAttributes\n                }]\n              })\n                .then((newEvent) => {\n                  if (newEvent) {\n                    res.status(201).send({\n                      statusCode: 201,\n                      message: 'Event has been updated accordingly',\n                      event: newEvent\n                    });\n                  }\n                });\n            }\n          });\n      });\n  }\n\n  /**\n     * Delete an Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  deleteEvent(req, res) {\n    const eventId = parseInt(req.params.id, 10);\n    if (isNaN(eventId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Event id is not a number'\n      });\n    }\n    EventModel.findById(eventId)\n      .then((deletedEvent) => {\n        if (!deletedEvent) {\n          return res.status(400).send({\n            statusCode: 400,\n            message: `Event not found with id : ${eventId}`\n          });\n        }\n        EventModel.destroy({\n          where: {\n            id: eventId,\n          }\n        })\n          .then(() => res.status(200).send({\n            statusCode: 200,\n            message: 'This Event has been deleted',\n            event: deletedEvent\n          }));\n      })\n      .catch(() => res.status(500).send({\n        statusCode: 500,\n        message: 'Error deleting Event'\n      }));\n  }\n}\n\nexport default Events;\n"]}