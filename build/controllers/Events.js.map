{"version":3,"sources":["../../server/controllers/Events.js"],"names":["Event","Events","CenterModel","Centers","Op","sequelize","req","res","eventId","parseInt","params","id","isNaN","status","send","statusCode","message","findById","then","event","limitValue","query","limit","process","env","DATA_LIMIT","order","sort","findAll","where","startDate","gte","Date","toDateString","returnedEvent","events","catch","search","split","titleResp","map","title","iLike","value","or","searchResults","length","pageValue","next","findAndCountAll","include","model","as","offset","json","rows","mete","err","body","endDate","findOne","centerId","lte","result","create","img_url","location","description","userId","error","update","updatedEvent","newEvent","deletedEvent","destroy"],"mappings":"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","file":"Events.js","sourcesContent":["// import Sequelize from '../config';\nimport models from '../models';\nimport { generatePaginationMeta } from '../middleware/util';\n\nconst Event = models.Events;\nconst CenterModel = models.Centers;\nconst { Op } = models.sequelize;\n\n// let storage = multer.diskStorage({\n//     destination: '../server/public/images/uploads',\n//     filename: (req, file, cb) => {\n//         cb(null, file.fieldname + '-' + Date.now() + path.extname())\n//     }\n// });\n//\n// let upload = multer({ storage: storage }).array('photos', 5);\n\n/**\n * @export\n * @class Events\n */\nexport class Events {\n  /**\n     * Get a single Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  getEvent(req, res) {\n    const eventId = parseInt(req.params.id, 10);\n    if (isNaN(eventId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Event id is not a number'\n      });\n    }\n\n    Event.findById(eventId)\n      .then((event) => {\n        if (!event) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: `Event with id: ${eventId} does not exist`\n          });\n        }\n        return res.status(200).send({\n          statusCode: 200,\n          message: `Event with id: ${eventId} was found`,\n          event\n        });\n      });\n  }\n\n  /**\n     * Get Multiple Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  getEvents(req, res) {\n    const limitValue = parseInt(req.query.limit, 10) || process.env.DATA_LIMIT;\n    const order = (req.query.order) ? req.query.order : 'desc';\n    if (req.query && req.query.sort) {\n      if (order) {\n        Event.findAll({\n          where: {\n            startDate: {\n              [Op.gte]: new Date().toDateString()\n            }\n          },\n          order: [\n            ['id', order]\n          ]\n        })\n          .then((returnedEvent) => {\n            if (!returnedEvent) {\n              return res.status(400).send({\n                statusCode: 400,\n                message: 'No Event found'\n              });\n            }\n\n            return res.status(200).send({\n              statusCode: 200,\n              message: 'Event(s) found',\n              events: returnedEvent\n            });\n          })\n          .catch(() => res.status(500).send({\n            statusCode: 500,\n            message: 'Error searching for Events'\n          }));\n      }\n    } else if (req.query.search || req.query.limit) {\n      const search = req.query.search.split(' ');\n\n      /**\n      * Search with Title But Map first\n      * */\n      const titleResp = search.map(value => ({\n        title: {\n          [Op.iLike]: `%${value}%`\n        }\n      }));\n\n      Event.findAll({\n        where: {\n          [Op.or]: titleResp,\n          startDate: {\n            [Op.gte]: new Date().toDateString()\n          }\n        },\n        order: [\n          ['id', order]\n        ],\n        limit: limitValue,\n      })\n        .then((searchResults) => {\n          if (searchResults.length <= 0) {\n            return res.status(400).send({\n              statusCode: 400,\n              message: 'Event(s) do not match your search result'\n            });\n          }\n          return res.status(200).send({\n            statusCode: 200,\n            message: 'The Events found',\n            events: searchResults\n          });\n        });\n    } else {\n      const pageValue = req.query.next || 0;\n      Event.findAndCountAll({\n        where: {\n          startDate: {\n            [Op.gte]: new Date().toDateString()\n          }\n        },\n        include: [{\n          model: CenterModel,\n          as: 'center'\n        }],\n        order: [\n          ['id', order]\n        ],\n        limit: limitValue,\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\n      })\n        .then((events) => {\n          if (events.length === 0) {\n            return res.status(404).send({\n              statusCode: 404,\n              message: 'No result found',\n            });\n          }\n\n          res.status(200).json({\n            statusCode: 200,\n            message: 'Successful Events!',\n            events: events.rows,\n            mete: generatePaginationMeta(events, limitValue, pageValue)\n          });\n        })\n        .catch(err => res.status(500).send(err));\n    }\n  }\n\n  /**\n     * Create Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  createEvent(req, res) {\n    const startDate = new Date(req.body.startDate);\n    const endDate = new Date(req.body.endDate);\n\n    // noinspection JSDuplicatedDeclaration\n    Event.findOne({\n      where: {\n        centerId: req.body.centerId,\n        startDate: {\n          [Op.lte]: endDate,\n          [Op.lte]: startDate\n        },\n        endDate: {\n          [Op.gte]: startDate,\n          [Op.gte]: endDate\n        }\n      }\n    })\n      .then((result) => {\n        if (result !== null) {\n          return res.send({\n            message: 'Center has been booked for this date',\n            statusCode: 400\n          });\n        }\n        return Event.create({\n          title: req.body.title,\n          img_url: req.body.img_url,\n          location: req.body.location,\n          description: req.body.description,\n          startDate,\n          endDate,\n          centerId: parseInt(req.body.centerId, 10),\n          userId: parseInt(req.body.userId, 10),\n        })\n          .then((event) => {\n            res.status(200).send({\n              statusCode: 200,\n              message: 'Event has been created',\n              event\n            });\n          })\n          .catch(err => res.status(500).send({\n            statusCode: 500,\n            message: 'Event cannot be created',\n            error: err\n          }));\n      })\n      .catch((err) => {\n        res.status(500).send({\n          statusCode: 500,\n          message: 'Event cannot be created',\n          error: err\n        });\n      });\n  }\n\n  /**\n     * Update a single Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  updateEvent(req, res) {\n    const eventId = parseInt(req.params.id, 10);\n    if (isNaN(eventId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Event id is not a number'\n      });\n    }\n\n    Event.findById(eventId)\n      .then((event) => {\n        if (!event) {\n          return res.status(400).send({\n            statusCode: 400,\n            message: `Event not Found with ${eventId}`\n          });\n        }\n\n        Event.update(\n          {\n            title: req.body.title || event.title,\n            img_url: req.body.img_url || event.img_url,\n            description: req.body.description || event.description,\n            startDate: req.body.startDate || event.startDate,\n            endDate: req.body.endDate || event.endDate,\n            centerId: parseInt(req.body.centerId, 10) || event.centerId,\n            userId: parseInt(req.body.userId, 10) || event.userId,\n          },\n          {\n            where: {\n              id: eventId\n            }\n          }\n        )\n          .then((updatedEvent) => {\n            if (updatedEvent) {\n              Event.findById(eventId, {\n                include: [{\n                  model: CenterModel,\n                  as: 'center'\n                }]\n              })\n                .then((newEvent) => {\n                  if (newEvent) {\n                    res.status(201).send({\n                      statusCode: 201,\n                      message: 'Event has been updated accordingly',\n                      event: newEvent\n                    });\n                  }\n                });\n            }\n          })\n          .catch(error => res.status(500).send(error));\n      })\n      .catch(error => res.status(500).send(error));\n  }\n\n  /**\n     * Delete an Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  deleteEvent(req, res) {\n    const eventId = parseInt(req.params.id, 10);\n    if (isNaN(eventId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Event id is not a number'\n      });\n    }\n    Event.findById(eventId)\n      .then((deletedEvent) => {\n        if (!deletedEvent) {\n          return res.status(400).send({\n            statusCode: 400,\n            message: `Event not found with id : ${eventId}`\n          });\n        }\n        Event.destroy({\n          where: {\n            id: eventId,\n          }\n        })\n          .then(() => res.status(200).send({\n            statusCode: 200,\n            message: 'This Event has been deleted',\n            event: deletedEvent\n          }));\n      })\n      .catch(() => res.status(500).send({\n        statusCode: 500,\n        message: 'Error deleting Event'\n      }));\n  }\n}\n\nexport default Events;\n"]}