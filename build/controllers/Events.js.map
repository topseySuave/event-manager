{"version":3,"sources":["../../server/controllers/Events.js"],"names":["Event","Events","CenterModel","Centers","Op","sequelize","centerAttributes","attributes","req","res","eventId","parseInt","params","id","isNaN","findById","then","event","status","send","statusCode","message","limitValue","query","limit","process","env","DATA_LIMIT","order","pageValue","next","sort","findAll","where","startDate","gte","Date","toDateString","returnedEvent","events","catch","sessionEvents","userId","findAndCountAll","include","model","as","eventsFound","count","rows","meta","search","split","titleResp","map","title","iLike","value","or","searchResults","offset","length","json","err","body","endDate","findOne","centerId","lte","result","create","img_url","location","description","error","update","updatedEvent","newEvent","deletedEvent","destroy"],"mappings":"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","file":"Events.js","sourcesContent":["import models from \"../models\";\nimport {\n  isNaNValidator,\n  generatePaginationMeta,\n  generatePagination\n} from \"../middleware/util\";\n\nconst Event = models.Events;\nconst CenterModel = models.Centers;\nconst { Op } = models.sequelize;\nconst centerAttributes = [\"location\"];\nconst attributes = ['id', 'title', 'img_url', 'description', 'startDate', 'endDate', 'centerId'];\n\n/**\n * @export\n * @class Events\n */\nexport class Events {\n  /**\n   * Get a single Event record\n   *\n   * @param {object} req - HTTP Request\n   * @param {object} res - HTTP Response\n   * @returns {object} Class instance\n   * @memberof Events\n   */\n  getEvent(req, res) {\n    const eventId = parseInt(req.params.id, 10);\n    if (isNaN(eventId)) return isNaNValidator(res, eventId);\n\n    Event.findById(eventId).then(event => {\n      if (!event) {\n        return res.status(404).send({\n          statusCode: 404,\n          message: `Event with id: ${eventId} does not exist`\n        });\n      }\n      return res.status(200).send({\n        statusCode: 200,\n        message: `Event with id: ${eventId} was found`,\n        event\n      });\n    });\n  }\n\n  /**\n   * Get Multiple Event record\n   *\n   * @param {object} req - HTTP Request\n   * @param {object} res - HTTP Response\n   * @returns {object} Class instance\n   * @memberof Events\n   */\n  getEvents(req, res) {\n    const limitValue = parseInt(req.query.limit, 10) || process.env.DATA_LIMIT;\n    const order = req.query.order ? req.query.order : \"desc\";\n    const pageValue = req.query.next || 0;\n    if (req.query && req.query.sort) {\n      if (order) {\n        Event.findAll({\n          where: {\n            startDate: {\n              [Op.gte]: new Date().toDateString()\n            }\n          },\n          order: [[\"id\", order]],\n          attributes\n        })\n          .then(returnedEvent => {\n            if (!returnedEvent) {\n              return res.status(400).send({\n                statusCode: 400,\n                message: \"No Event found\"\n              });\n            }\n\n            return res.status(200).send({\n              statusCode: 200,\n              message: \"Event(s) found\",\n              events: returnedEvent\n            });\n          })\n          .catch(() =>\n            res.status(500).send({\n              statusCode: 500,\n              message: \"Error searching for Events\"\n            })\n          );\n      }\n    } else if (req.query.sessionEvents) {\n      const userId = parseInt(req.query.sessionEvents, 10) || 0;\n      if (isNaN(userId)) return isNaNValidator(res, userId);\n\n      Event.findAndCountAll({\n        where: {\n          userId\n        },\n        include: [\n          {\n            model: CenterModel,\n            as: \"center\",\n            attributes: centerAttributes\n          }\n        ],\n        order: [[\"id\", order]],\n        limit: limitValue,\n        attributes\n      }).then(eventsFound => {\n        if (eventsFound.count <= 0)\n          return res.status(200).send({\n            statusCode: 200,\n            message: \"There are no event for this user\",\n            events: []\n          });\n\n        return res.status(200).send({\n          statusCode: 200,\n          message: \"The Events found\",\n          events: eventsFound.rows,\n          meta: generatePaginationMeta(eventsFound, limitValue, pageValue)\n        });\n      });\n    } else if (req.query.search || req.query.limit) {\n      const search = req.query.search.split(\" \");\n\n      /**\n       * Search with Title But Map first\n       * */\n      const titleResp = search.map(value => ({\n        title: {\n          [Op.iLike]: `%${value}%`\n        }\n      }));\n\n      Event.findAndCountAll({\n        where: {\n          [Op.or]: titleResp,\n          startDate: {\n            [Op.gte]: new Date().toDateString()\n          }\n        },\n        include: [\n          {\n            model: CenterModel,\n            as: \"center\",\n            attributes: centerAttributes\n          }\n        ],\n        attributes,\n        order: [[\"id\", order]],\n        limit: limitValue\n      }).then(searchResults => {\n        if (searchResults.count <= 0)\n          return res.status(400).send({\n            statusCode: 400,\n            message: \"Event(s) do not match your search result\"\n          });\n\n        return res.status(200).send({\n          statusCode: 200,\n          message: \"The Events found\",\n          events: searchResults.rows,\n          meta: generatePaginationMeta(searchResults, limitValue, pageValue)\n        });\n      });\n    } else {\n      Event.findAndCountAll({\n        where: {\n          startDate: {\n            [Op.gte]: new Date().toDateString()\n          }\n        },\n        include: [\n          {\n            model: CenterModel,\n            as: \"center\",\n            attributes: centerAttributes\n          }\n        ],\n        attributes,\n        order: [[\"id\", order]],\n        limit: limitValue,\n        offset: pageValue > 1 ? pageValue * limitValue - limitValue : pageValue\n      })\n        .then(events => {\n          if (events.length === 0) {\n            return res.status(404).send({\n              statusCode: 404,\n              message: \"No result found\"\n            });\n          }\n\n          res.status(200).json({\n            statusCode: 200,\n            message: \"Successful Events!\",\n            events: events.rows,\n            meta: generatePaginationMeta(events, limitValue, pageValue)\n          });\n        })\n        .catch(err => res.status(500).send(err));\n    }\n  }\n\n  /**\n   * Create Event record\n   *\n   * @param {object} req - HTTP Request\n   * @param {object} res - HTTP Response\n   * @returns {object} Class instance\n   * @memberof Events\n   */\n  createEvent(req, res) {\n    const startDate = new Date(req.body.startDate);\n    const endDate = new Date(req.body.endDate);\n\n    // noinspection JSDuplicatedDeclaration\n    Event.findOne({\n      where: {\n        centerId: req.body.centerId,\n        startDate: {\n          [Op.lte]: endDate,\n          [Op.lte]: startDate\n        },\n        endDate: {\n          [Op.gte]: startDate,\n          [Op.gte]: endDate\n        }\n      }\n    })\n      .then(result => {\n        if (result !== null) {\n          return res.send({\n            message: \"Center has been booked for this date\",\n            statusCode: 400\n          });\n        }\n        return Event.create({\n          title: req.body.title,\n          img_url: req.body.img_url,\n          location: req.body.location,\n          description: req.body.description,\n          startDate,\n          endDate,\n          centerId: parseInt(req.body.centerId, 10),\n          userId: parseInt(req.body.userId, 10)\n        })\n          .then(event => {\n            res.status(200).send({\n              statusCode: 200,\n              message: \"Event has been created\",\n              event\n            });\n          })\n          .catch(err =>\n            res.status(500).send({\n              statusCode: 500,\n              message: \"Event cannot be created\",\n              error: err\n            })\n          );\n      })\n      .catch(err => {\n        res.status(500).send({\n          statusCode: 500,\n          message: \"Event cannot be created\",\n          error: err\n        });\n      });\n  }\n\n  /**\n   * Update a single Event record\n   *\n   * @param {object} req - HTTP Request\n   * @param {object} res - HTTP Response\n   * @returns {object} Class instance\n   * @memberof Events\n   */\n  updateEvent(req, res) {\n    const eventId = parseInt(req.params.id, 10);\n    if (isNaN(eventId)) return isNaNValidator(res, eventId);\n\n    Event.findById(eventId).then(event => {\n      if (!event) {\n        return res.status(400).send({\n          statusCode: 400,\n          message: `Event not Found with ${eventId}`\n        });\n      }\n\n      Event.update(\n        {\n          title: req.body.title || event.title,\n          img_url: req.body.img_url || event.img_url,\n          description: req.body.description || event.description,\n          startDate: req.body.startDate || event.startDate,\n          endDate: req.body.endDate || event.endDate,\n          centerId: parseInt(req.body.centerId, 10) || event.centerId,\n          userId: parseInt(req.body.userId, 10) || event.userId\n        },\n        {\n          where: {\n            id: eventId\n          }\n        }\n      ).then(updatedEvent => {\n        if (updatedEvent) {\n          Event.findById(eventId, {\n            include: [\n              {\n                model: CenterModel,\n                as: \"center\",\n                attributes: centerAttributes\n              }\n            ],\n            attributes\n          }).then(newEvent => {\n            if (newEvent) {\n              res.status(201).send({\n                statusCode: 201,\n                message: \"Event has been updated accordingly\",\n                event: newEvent\n              });\n            }\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Delete an Event record\n   *\n   * @param {object} req - HTTP Request\n   * @param {object} res - HTTP Response\n   * @returns {object} Class instance\n   * @memberof Events\n   */\n  deleteEvent(req, res) {\n    const eventId = parseInt(req.params.id, 10);\n    if (isNaN(eventId)) return isNaNValidator(res, eventId);\n\n    Event.findById(eventId)\n      .then(deletedEvent => {\n        if (!deletedEvent) {\n          return res.status(400).send({\n            statusCode: 400,\n            message: `Event not found with id : ${eventId}`\n          });\n        }\n        Event.destroy({\n          where: {\n            id: eventId\n          }\n        }).then(() =>\n          res.status(200).send({\n            statusCode: 200,\n            message: \"This Event has been deleted\",\n            event: deletedEvent\n          })\n        );\n      })\n      .catch(() =>\n        res.status(500).send({\n          statusCode: 500,\n          message: \"Error deleting Event\"\n        })\n      );\n  }\n}\n\nexport default Events;\n"]}