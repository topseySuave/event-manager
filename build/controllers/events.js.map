{"version":3,"sources":["../../server/controllers/events.js"],"names":["Event","Events","CenterModel","Centers","Op","sequelize","req","res","eventId","parseInt","params","id","isNaN","status","send","message","error","findById","then","event","statusCode","order","query","sort","findAll","returnedEvent","center","catch","search","limit","limitValue","split","titleResp","map","title","ilike","value","where","searchResults","length","pageValue","next","findAndCountAll","include","model","as","offset","events","json","pageSize","rows","totalCount","count","pageCount","Math","ceil","page","err","startDate","Date","body","endDate","findOne","centerId","lte","gte","result","create","img_url","location","description","userId","success","update","updatedEvent","newEvent","deletedEvent","destroy"],"mappings":"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","file":"events.js","sourcesContent":["// import Sequelize from '../config';\r\nimport models from '../models';\r\n\r\nconst Event = models.Events;\r\nconst CenterModel = models.Centers;\r\nconst Op = models.sequelize.Op;\r\n\r\n// let storage = multer.diskStorage({\r\n//     destination: '../server/public/images/uploads',\r\n//     filename: (req, file, cb) => {\r\n//         cb(null, file.fieldname + '-' + Date.now() + path.extname())\r\n//     }\r\n// });\r\n//\r\n// let upload = multer({ storage: storage }).array('photos', 5);\r\n\r\n/**\r\n * @export\r\n * @class Events\r\n */\r\nexport class Events {\r\n  /**\r\n     * Get a single Event record\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Events\r\n     */\r\n  getEvent(req, res) {\r\n    const eventId = parseInt(req.params.id, 10);\r\n    if (isNaN(eventId)) {\r\n      return res.status(400).send({\r\n        message: 'Event id is not a number',\r\n        error: true\r\n      });\r\n    }\r\n\r\n    Event.findById(eventId)\r\n      .then((event) => {\r\n        if (!event) {\r\n          return res.status(404).send({\r\n            statusCode: 404,\r\n            message: `Event with id: ${eventId} does not exist`\r\n          });\r\n        }\r\n        return res.status(200).send({\r\n          statusCode: 200,\r\n          message: `Event with id: ${eventId} was found`,\r\n          event\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n     * Get Multiple Event record\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Events\r\n     */\r\n  getEvents(req, res) {\r\n    const order = (req.query.order) ? req.query.order : 'desc';\r\n    if (req.query && req.query.sort) {\r\n      if (order) {\r\n        Event.findAll({\r\n          order: [\r\n            ['id', order]\r\n          ]\r\n        })\r\n          .then((returnedEvent) => {\r\n            if (!returnedEvent) {\r\n              return res.status(400).send({\r\n                statusCode: 400,\r\n                message: 'No Event found'\r\n              });\r\n            }\r\n\r\n            return res.status(200).send({\r\n              statusCode: 200,\r\n              message: 'Event(s) found',\r\n              center: returnedEvent\r\n            });\r\n          })\r\n          .catch(() => res.status(500).send({\r\n            statusCode: 500,\r\n            message: 'Error searching for Events'\r\n          }));\r\n      }\r\n    } else if (req.query.search && req.query.limit) {\r\n      const limitValue = parseInt(req.query.limit, 10) || 10;\r\n      const search = req.query.search.split(' ');\r\n\r\n      /**\r\n      * Search with Title But Map first\r\n      **/\r\n      const titleResp = search.map(value => ({\r\n        title: {\r\n          [Op.ilike]: `%${value}%`\r\n        }\r\n      }));\r\n\r\n      Event.findAll({\r\n        where: {\r\n          titleResp\r\n        },\r\n        order: [\r\n          ['id', order]\r\n        ],\r\n        limit: limitValue,\r\n      })\r\n        .then((searchResults) => {\r\n          if (searchResults.length <= 0) {\r\n            return res.status(400).send({\r\n              statusCode: 400,\r\n              message: 'Event(s) do not match your search result'\r\n            });\r\n          }\r\n          return res.status(200).send({\r\n            statusCode: 200,\r\n            message: 'The Events found',\r\n            searchResults\r\n          });\r\n        });\r\n    } else {\r\n      const limitValue = parseInt(req.query.limit, 10) || 5;\r\n      const pageValue = req.query.next || 0;\r\n\r\n      Event.findAndCountAll({\r\n        include: [{\r\n          model: CenterModel,\r\n          as: 'center'\r\n        }],\r\n        order: [\r\n          ['id', order]\r\n        ],\r\n        limit: limitValue,\r\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\r\n      })\r\n        .then((events) => {\r\n          if (events.length === 0) {\r\n            return res.status(404).send({\r\n              statusCode: 404,\r\n              message: 'No result found',\r\n            });\r\n          }\r\n\r\n          res.status(200).json({\r\n            statusCode: 200,\r\n            message: 'Successful Events!',\r\n            pageSize: parseInt(events.rows.length, 10),\r\n            totalCount: events.count,\r\n            pageCount: Math.ceil(events.count / limitValue),\r\n            page: (pageValue) ? parseInt(pageValue, 10) : parseInt(pageValue + 1, 10),\r\n            events: events.rows,\r\n          });\r\n        })\r\n        .catch(err => res.status(500).send(err));\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Create Event record\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Events\r\n     */\r\n  createEvent(req, res) {\r\n    const startDate = new Date(req.body.startDate);\r\n    const endDate = new Date(req.body.endDate);\r\n\r\n    // noinspection JSDuplicatedDeclaration\r\n    Event.findOne({\r\n      where: {\r\n        centerId: req.body.centerId,\r\n        startDate: {\r\n          [Op.lte]: endDate,\r\n          [Op.lte]: startDate\r\n        },\r\n        endDate: {\r\n          [Op.gte]: startDate,\r\n          [Op.gte]: endDate\r\n        }\r\n      }\r\n    })\r\n      .then((result) => {\r\n        if (result !== null) {\r\n          return res.send({\r\n            message: 'Center has been booked for this date',\r\n            statusCode: 400,\r\n            error: true\r\n          });\r\n        }\r\n        return Event.create({\r\n          title: req.body.title,\r\n          img_url: req.body.img_url,\r\n          location: req.body.location,\r\n          description: req.body.description,\r\n          startDate,\r\n          endDate,\r\n          centerId: parseInt(req.body.centerId, 10),\r\n          userId: parseInt(req.body.userId, 10),\r\n        })\r\n          .then((event) => {\r\n            res.status(200).send({\r\n              statusCode: 200,\r\n              message: 'Event has been created',\r\n              event\r\n            });\r\n          })\r\n          .catch(err => res.status(500).send({\r\n            statusCode: 500,\r\n            success: false,\r\n            message: 'Event cannot be created',\r\n            error: err\r\n          }));\r\n      })\r\n      .catch((err) => {\r\n        res.status(500).send({\r\n          statusCode: 500,\r\n          success: false,\r\n          message: 'Event cannot be created',\r\n          error: err\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n     * Update a single Event record\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Events\r\n     */\r\n  updateEvent(req, res) {\r\n    const eventId = parseInt(req.params.id, 10);\r\n    if (isNaN(eventId)) {\r\n      return res.status(400).send({\r\n        statusCode: 400,\r\n        message: 'Event id is not a number',\r\n        error: true\r\n      });\r\n    }\r\n\r\n    Event.findById(eventId)\r\n      .then((event) => {\r\n        if (!event) {\r\n          return res.status(400).send({\r\n            statusCode: 400,\r\n            message: `Event not Found with ${eventId}`\r\n          });\r\n        }\r\n\r\n        Event.update(\r\n          {\r\n            title: req.body.title || event.title,\r\n            img_url: req.body.img_url || event.img_url,\r\n            description: req.body.description || event.description,\r\n            startDate: req.body.startDate || event.startDate,\r\n            endDate: req.body.endDate || event.endDate,\r\n            centerId: parseInt(req.body.centerId, 10) || event.centerId,\r\n            userId: parseInt(req.body.userId, 10) || event.userId,\r\n          },\r\n          {\r\n            where: {\r\n              id: eventId\r\n            }\r\n          }\r\n        )\r\n          .then((updatedEvent) => {\r\n            if (updatedEvent) {\r\n              Event.findById(eventId, {\r\n                include: [{\r\n                  model: CenterModel,\r\n                  as: 'center'\r\n                }]\r\n              })\r\n                .then((newEvent) => {\r\n                  if (newEvent) {\r\n                    res.status(201).send({\r\n                      statusCode: 201,\r\n                      message: 'Event has been updated accordingly',\r\n                      event: newEvent\r\n                    });\r\n                  }\r\n                });\r\n            }\r\n          })\r\n          .catch(error => res.status(500).send(error));\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  /**\r\n     * Delete an Event record\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Events\r\n     */\r\n  deleteEvent(req, res) {\r\n    const eventId = parseInt(req.params.id, 10);\r\n    if (isNaN(eventId)) {\r\n      return res.status(400).send({\r\n        statusCode: 400,\r\n        message: 'Event id is not a number'\r\n      });\r\n    }\r\n    Event.findById(eventId)\r\n      .then((deletedEvent) => {\r\n        if (!deletedEvent) {\r\n          return res.status(400).send({\r\n            statusCode: 400,\r\n            message: `Event not found with id : ${eventId}`\r\n          });\r\n        }\r\n        Event.destroy({\r\n          where: {\r\n            id: eventId,\r\n          }\r\n        })\r\n          .then(() => res.status(200).send({\r\n            statusCode: 200,\r\n            message: 'This Event has been deleted',\r\n            event: deletedEvent\r\n          }));\r\n      })\r\n      .catch(() => res.status(500).send({\r\n        statusCode: 500,\r\n        message: 'Error deleting Event'\r\n      }));\r\n  }\r\n}\r\n\r\nexport default Events;\r\n"]}