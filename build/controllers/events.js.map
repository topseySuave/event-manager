{"version":3,"sources":["../../server/controllers/events.js"],"names":["Event","Events","CenterModel","Centers","Op","sequelize","req","res","eventId","parseInt","params","id","isNaN","status","send","message","error","findById","then","event","statusCode","limitValue","query","limit","process","env","DATA_LIMIT","order","sort","findAll","where","startDate","gte","Date","toDateString","returnedEvent","events","catch","search","split","titleResp","map","title","iLike","value","or","searchResults","length","pageValue","next","findAndCountAll","include","model","as","offset","json","pageSize","rows","totalCount","count","pageCount","Math","ceil","page","err","body","endDate","findOne","centerId","lte","result","create","img_url","location","description","userId","success","update","updatedEvent","newEvent","deletedEvent","destroy"],"mappings":"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","file":"events.js","sourcesContent":["// import Sequelize from '../config';\nimport models from '../models';\n\nconst Event = models.Events;\nconst CenterModel = models.Centers;\nconst { Op } = models.sequelize;\n\n// let storage = multer.diskStorage({\n//     destination: '../server/public/images/uploads',\n//     filename: (req, file, cb) => {\n//         cb(null, file.fieldname + '-' + Date.now() + path.extname())\n//     }\n// });\n//\n// let upload = multer({ storage: storage }).array('photos', 5);\n\n/**\n * @export\n * @class Events\n */\nexport class Events {\n  /**\n     * Get a single Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  getEvent(req, res) {\n    const eventId = parseInt(req.params.id, 10);\n    if (isNaN(eventId)) {\n      return res.status(400).send({\n        message: 'Event id is not a number',\n        error: true\n      });\n    }\n\n    Event.findById(eventId)\n      .then((event) => {\n        if (!event) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: `Event with id: ${eventId} does not exist`\n          });\n        }\n        return res.status(200).send({\n          statusCode: 200,\n          message: `Event with id: ${eventId} was found`,\n          event\n        });\n      });\n  }\n\n  /**\n     * Get Multiple Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  getEvents(req, res) {\n    const limitValue = parseInt(req.query.limit, 10) || process.env.DATA_LIMIT;\n    const order = (req.query.order) ? req.query.order : 'desc';\n    if (req.query && req.query.sort) {\n      if (order) {\n        Event.findAll({\n          where: {\n            startDate: {\n              [Op.gte]: new Date().toDateString()\n            }\n          },\n          order: [\n            ['id', order]\n          ]\n        })\n          .then((returnedEvent) => {\n            if (!returnedEvent) {\n              return res.status(400).send({\n                statusCode: 400,\n                message: 'No Event found'\n              });\n            }\n\n            return res.status(200).send({\n              statusCode: 200,\n              message: 'Event(s) found',\n              events: returnedEvent\n            });\n          })\n          .catch(() => res.status(500).send({\n            statusCode: 500,\n            message: 'Error searching for Events'\n          }));\n      }\n    } else if (req.query.search || req.query.limit) {\n      const search = req.query.search.split(' ');\n\n      /**\n      * Search with Title But Map first\n      * */\n      const titleResp = search.map(value => ({\n        title: {\n          [Op.iLike]: `%${value}%`\n        }\n      }));\n\n      Event.findAll({\n        where: {\n          [Op.or]: titleResp,\n          startDate: {\n            [Op.gte]: new Date().toDateString()\n          }\n        },\n        order: [\n          ['id', order]\n        ],\n        limit: limitValue,\n      })\n        .then((searchResults) => {\n          if (searchResults.length <= 0) {\n            return res.status(400).send({\n              statusCode: 400,\n              message: 'Event(s) do not match your search result'\n            });\n          }\n          return res.status(200).send({\n            statusCode: 200,\n            message: 'The Events found',\n            events: searchResults\n          });\n        });\n    } else {\n      const pageValue = req.query.next || 0;\n      Event.findAndCountAll({\n        where: {\n          startDate: {\n            [Op.gte]: new Date().toDateString()\n          }\n        },\n        include: [{\n          model: CenterModel,\n          as: 'center'\n        }],\n        order: [\n          ['id', order]\n        ],\n        limit: limitValue,\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\n      })\n        .then((events) => {\n          if (events.length === 0) {\n            return res.status(404).send({\n              statusCode: 404,\n              message: 'No result found',\n            });\n          }\n\n          res.status(200).json({\n            statusCode: 200,\n            message: 'Successful Events!',\n            pageSize: parseInt(events.rows.length, 10),\n            totalCount: events.count,\n            pageCount: Math.ceil(events.count / limitValue),\n            page: (pageValue) ? parseInt(pageValue, 10) : parseInt(pageValue + 1, 10),\n            events: events.rows,\n          });\n        })\n        .catch(err => res.status(500).send(err));\n    }\n  }\n\n  /**\n     * Create Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  createEvent(req, res) {\n    const startDate = new Date(req.body.startDate);\n    const endDate = new Date(req.body.endDate);\n\n    // noinspection JSDuplicatedDeclaration\n    Event.findOne({\n      where: {\n        centerId: req.body.centerId,\n        startDate: {\n          [Op.lte]: endDate,\n          [Op.lte]: startDate\n        },\n        endDate: {\n          [Op.gte]: startDate,\n          [Op.gte]: endDate\n        }\n      }\n    })\n      .then((result) => {\n        if (result !== null) {\n          return res.send({\n            message: 'Center has been booked for this date',\n            statusCode: 400,\n            error: true\n          });\n        }\n        return Event.create({\n          title: req.body.title,\n          img_url: req.body.img_url,\n          location: req.body.location,\n          description: req.body.description,\n          startDate,\n          endDate,\n          centerId: parseInt(req.body.centerId, 10),\n          userId: parseInt(req.body.userId, 10),\n        })\n          .then((event) => {\n            res.status(200).send({\n              statusCode: 200,\n              message: 'Event has been created',\n              event\n            });\n          })\n          .catch(err => res.status(500).send({\n            statusCode: 500,\n            success: false,\n            message: 'Event cannot be created',\n            error: err\n          }));\n      })\n      .catch((err) => {\n        res.status(500).send({\n          statusCode: 500,\n          success: false,\n          message: 'Event cannot be created',\n          error: err\n        });\n      });\n  }\n\n  /**\n     * Update a single Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  updateEvent(req, res) {\n    const eventId = parseInt(req.params.id, 10);\n    if (isNaN(eventId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Event id is not a number',\n        error: true\n      });\n    }\n\n    Event.findById(eventId)\n      .then((event) => {\n        if (!event) {\n          return res.status(400).send({\n            statusCode: 400,\n            message: `Event not Found with ${eventId}`\n          });\n        }\n\n        Event.update(\n          {\n            title: req.body.title || event.title,\n            img_url: req.body.img_url || event.img_url,\n            description: req.body.description || event.description,\n            startDate: req.body.startDate || event.startDate,\n            endDate: req.body.endDate || event.endDate,\n            centerId: parseInt(req.body.centerId, 10) || event.centerId,\n            userId: parseInt(req.body.userId, 10) || event.userId,\n          },\n          {\n            where: {\n              id: eventId\n            }\n          }\n        )\n          .then((updatedEvent) => {\n            if (updatedEvent) {\n              Event.findById(eventId, {\n                include: [{\n                  model: CenterModel,\n                  as: 'center'\n                }]\n              })\n                .then((newEvent) => {\n                  if (newEvent) {\n                    res.status(201).send({\n                      statusCode: 201,\n                      message: 'Event has been updated accordingly',\n                      event: newEvent\n                    });\n                  }\n                });\n            }\n          })\n          .catch(error => res.status(500).send(error));\n      })\n      .catch(error => res.status(500).send(error));\n  }\n\n  /**\n     * Delete an Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Events\n     */\n  deleteEvent(req, res) {\n    const eventId = parseInt(req.params.id, 10);\n    if (isNaN(eventId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Event id is not a number'\n      });\n    }\n    Event.findById(eventId)\n      .then((deletedEvent) => {\n        if (!deletedEvent) {\n          return res.status(400).send({\n            statusCode: 400,\n            message: `Event not found with id : ${eventId}`\n          });\n        }\n        Event.destroy({\n          where: {\n            id: eventId,\n          }\n        })\n          .then(() => res.status(200).send({\n            statusCode: 200,\n            message: 'This Event has been deleted',\n            event: deletedEvent\n          }));\n      })\n      .catch(() => res.status(500).send({\n        statusCode: 500,\n        message: 'Error deleting Event'\n      }));\n  }\n}\n\nexport default Events;\n"]}