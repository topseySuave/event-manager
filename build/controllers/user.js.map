{"version":3,"sources":["../../server/controllers/user.js"],"names":["User","config","Users","req","res","salt","genSaltSync","Math","floor","random","body","firstName","lastName","email","password","encryptedPassword","hashSync","findOne","where","$iLike","then","foundUser","status","json","statusCode","message","error","create","user","send","catch","err","compareSync","token","sign","id","role","process","env","SECRET_KEY","expiresIn","currentUser"],"mappings":"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","file":"user.js","sourcesContent":["import models from '../models';\r\nimport dotenv from 'dotenv';\r\nimport Validator from 'validatorjs';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst User = models.User;\r\n\r\ndotenv.config();\r\n\r\n/**\r\n * @export\r\n * @class Events\r\n */\r\nexport default class Users {\r\n\r\n    /**\r\n     * Signup User record\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Users\r\n     */\r\n    createUser(req, res){\r\n\r\n        /***Encrypt Password***/\r\n        let salt = bcrypt.genSaltSync(Math.floor(Math.random() * 31));\r\n\r\n        let { firstName, lastName, email, password } = req.body;\r\n        let encryptedPassword = bcrypt.hashSync(password, salt);\r\n\r\n        User.findOne({\r\n            where: {\r\n                email: {\r\n                    $iLike: email\r\n                }\r\n            }\r\n        })\r\n        .then((foundUser) => {\r\n            if (foundUser) {\r\n                return res.status(401).json({\r\n                    statusCode: 401,\r\n                    message: 'Email has been taken, Please Choose another',\r\n                    error: true\r\n                });\r\n            }\r\n            return User.create({\r\n                firstName: firstName,\r\n                lastName: lastName,\r\n                email: email,\r\n                password: encryptedPassword\r\n            })\r\n            .then((user) => {\r\n                return res.status(201)\r\n                    .send({\r\n                        statusCode: 201,\r\n                        message: `Account Created for ${user.firstName} ${user.lastName}`,\r\n                        error: false\r\n                    });\r\n            })\r\n            .catch(err => res.status(500).json(err));\r\n        })\r\n        .catch(error => res.status(500).json(error));\r\n    }\r\n\r\n    loginUser(req, res){\r\n        let { email, password } = req.body;\r\n            User.findOne({\r\n                where: {\r\n                    email: {\r\n                        $iLike: email\r\n                    }\r\n                }\r\n            })\r\n            .then((foundUser) => {\r\n                if(!foundUser){\r\n                    return res.status(404).send({\r\n                        statusCode: 404,\r\n                        message: 'User Not Found! Please Sign Up',\r\n                        error: true,\r\n                    });\r\n                }\r\n                else if(bcrypt.compareSync(password, foundUser.password))\r\n                {\r\n                    return res.status(200).send({\r\n                        statusCode: 200,\r\n                        message: 'Here`s your Token',\r\n                        token: jwt.sign({\r\n                            id: foundUser.id,\r\n                            firstName: foundUser.firstName,\r\n                            lastName: foundUser.lastName,\r\n                            email: foundUser.email,\r\n                            role: foundUser.role\r\n                        }, process.env.SECRET_KEY, { expiresIn: '24h' }),\r\n                        error: false\r\n                    });\r\n                }else{\r\n                    return res.status(401).send({\r\n                        statusCode: 401,\r\n                        message: 'Wrong password',\r\n                        error: true\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => res.status(500).send(error));\r\n    }\r\n\r\n    currUser (req, res){\r\n        return res.send({\r\n            currentUser: req.currentUser\r\n        });\r\n    }\r\n}"]}