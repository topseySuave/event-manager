{"version":3,"sources":["../../server/controllers/user.js"],"names":["User","Events","Op","sequelize","config","Users","req","res","salt","genSaltSync","Math","floor","random","body","firstName","lastName","email","password","encryptedPassword","hashSync","findOne","where","iLike","then","foundUser","status","json","statusCode","message","error","create","user","send","catch","err","compareSync","token","sign","id","role","process","env","SECRET_KEY","expiresIn","currentUser","update","updatedUser","subject","htmlOutput","redirect","findAll","users","userId","destroy","deletedEvents","deletedUser","errorMessage"],"mappings":"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","file":"user.js","sourcesContent":["import dotenv from 'dotenv';\r\n// import Validator from 'validatorjs';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport models from '../models';\r\nimport mailer from '../middleware/mailer';\r\n\r\nconst User = models.User;\r\nconst Events = models.Events;\r\nconst Op = models.sequelize.Op;\r\ndotenv.config();\r\n\r\n/**\r\n * @export\r\n * @class Events\r\n */\r\nexport default class Users {\r\n\r\n    /**\r\n     * Signup User record\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Users\r\n     */\r\n    createUser(req, res){\r\n\r\n        /***Encrypt Password***/\r\n        let salt = bcrypt.genSaltSync(Math.floor(Math.random() * 31));\r\n\r\n        let { firstName, lastName, email, password } = req.body;\r\n        let encryptedPassword = bcrypt.hashSync(password, salt);\r\n\r\n        User.findOne({\r\n            where: {\r\n                email: {\r\n                    [Op.iLike]: email\r\n                }\r\n            }\r\n        })\r\n        .then((foundUser) => {\r\n            if (foundUser) {\r\n                return res.status(401).json({\r\n                    statusCode: 401,\r\n                    message: 'Email has been taken, Please Choose another',\r\n                    error: true\r\n                });\r\n            }\r\n            return User.create({\r\n                firstName: firstName,\r\n                lastName: lastName,\r\n                email: email,\r\n                password: encryptedPassword\r\n            })\r\n            .then((user) => {\r\n                return res.status(201)\r\n                    .send({\r\n                        statusCode: 201,\r\n                        message: `Account Created for ${user.firstName} ${user.lastName}`,\r\n                        error: false\r\n                    });\r\n            })\r\n            .catch(err => res.status(500).json(err));\r\n        })\r\n        .catch(error => res.status(500).json(error));\r\n    }\r\n\r\n    loginUser(req, res){\r\n        let { email, password } = req.body;\r\n            User.findOne({\r\n                where: {\r\n                    email: {\r\n                        [Op.iLike]: email\r\n                    }\r\n                }\r\n            })\r\n            .then((foundUser) => {\r\n                if(!foundUser){\r\n                    return res.status(404).send({\r\n                        statusCode: 404,\r\n                        message: 'User Not Found! Please Sign Up',\r\n                        error: true,\r\n                    });\r\n                }\r\n                else if(bcrypt.compareSync(password, foundUser.password))\r\n                {\r\n                    return res.status(200).send({\r\n                        statusCode: 200,\r\n                        message: 'Here`s your Token',\r\n                        token: jwt.sign({\r\n                            id: foundUser.id,\r\n                            firstName: foundUser.firstName,\r\n                            lastName: foundUser.lastName,\r\n                            email: foundUser.email,\r\n                            role: foundUser.role\r\n                        }, process.env.SECRET_KEY, { expiresIn: '24h' }),\r\n                        error: false\r\n                    });\r\n                }else{\r\n                    return res.status(401).send({\r\n                        statusCode: 401,\r\n                        message: 'Wrong password',\r\n                        error: true\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => res.status(500).send(error));\r\n    }\r\n\r\n    currUser (req, res){\r\n      return res.send({\r\n        currentUser: req.currentUser\r\n      });\r\n    }\r\n\r\n    assignAdmin(req, res){\r\n        let { email, password } = req.body;\r\n        User.findOne({\r\n            where: {\r\n                email: {\r\n                    [Op.iLike]: email\r\n                }\r\n            }\r\n        })\r\n            .then((foundUser) => {\r\n                if(!foundUser){\r\n                    return res.status(404).send({\r\n                        statusCode: 404,\r\n                        message: 'User Not Found! Please Sign Up',\r\n                        error: true\r\n                    });\r\n                }\r\n                else if(bcrypt.compareSync(password, foundUser.password))\r\n                {\r\n                    // update user role to true...\r\n                    User.update({ role: true }, {\r\n                        where: {\r\n                            id: foundUser.id\r\n                        }\r\n                    })\r\n                    .then((updatedUser) => {\r\n                        let subject = 'Boots Events Manager: Administrator Assignment';\r\n                        let htmlOutput = `\r\n                            <h6>Boots Events Manager: Administrator Assignment</h6>\r\n                            <p>Dear, ${foundUser.firstName} ${foundUser.lastName} you have been Assigned as Administrator</p>\r\n                            <br />\r\n                            <ul>\r\n                                <li>First Name: ${foundUser.firstName}</li>\r\n                                <li>Last Name: ${foundUser.lastName}</li>\r\n                                <li>Email: ${foundUser.email}</li>\r\n                            </ul>\r\n                            <br />\r\n                            <h6>Admin Privileges</h6>\r\n                            <ul>\r\n                                <li>Centers: creation, updating, deleting</li>\r\n                            </ul>\r\n                        `;\r\n                        mailer(foundUser.email, subject, subject, htmlOutput);\r\n                        return res.redirect('/');\r\n                    });\r\n                } else {\r\n                    return res.status(401).send({\r\n                        statusCode: 401,\r\n                        message: 'Wrong password',\r\n                        error: true\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => res.status(500).send(error));\r\n    }\r\n\r\n    allUsers(req, res){\r\n        User.findAll()\r\n            .then((users) => {\r\n                return res.status(200).send({\r\n                    message: 'all users found',\r\n                    statusCode: 200,\r\n                    users\r\n                });\r\n            })\r\n            .catch(error => res.status(500).send(error));\r\n    }\r\n\r\n    removeUsers(req, res){\r\n        let { userId } = req.body;\r\n        User.findOne({\r\n            where: {\r\n                id: userId\r\n            }\r\n        })\r\n            .then((foundUser) => {\r\n                if(foundUser){\r\n                    Events.destroy({\r\n                        where: {\r\n                            userId: foundUser.id\r\n                        }\r\n                    })\r\n                        .then((deletedEvents) => {\r\n                            if(deletedEvents){\r\n                                User.destroy({\r\n                                    where: {\r\n                                        id: foundUser.id\r\n                                    }\r\n                                })\r\n                                    .then((deletedUser) => {\r\n                                        if(deletedUser){\r\n                                            res.status(200).send({\r\n                                                message: 'User has been deleted successfully',\r\n                                                error: false,\r\n                                                user: foundUser\r\n                                            });\r\n                                        }else{\r\n                                            res.send({\r\n                                                message: 'User was not deleted, please try again',\r\n                                                error: true\r\n                                            });\r\n                                        }\r\n                                    })\r\n                                    .catch(error => res.status(500).send({\r\n                                        error: true,\r\n                                        message: 'Houston we have a problem.!! Error deleting User',\r\n                                        errorMessage: error\r\n                                    }));\r\n                            }else{\r\n                                res.status(200).send({\r\n                                    message: 'User has been deleted successfully',\r\n                                    error: false,\r\n                                    user: foundUser\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch(err => res.status(500).send({\r\n                            error: true,\r\n                            message: 'Houston we have a problem.!! Error deleting Events',\r\n                            errorMessage: err\r\n                        }));\r\n                }else{\r\n                    res.send({\r\n                        error: true,\r\n                        message: 'User was not found',\r\n                    });\r\n                }\r\n            });\r\n    }\r\n}"]}