{"version":3,"sources":["../../server/controllers/user.js"],"names":["User","Events","Op","sequelize","config","Users","req","res","salt","genSaltSync","Math","floor","random","body","firstName","lastName","email","password","role","encryptedPassword","hashSync","findOne","where","iLike","then","foundUser","status","json","statusCode","message","create","send","user","compareSync","token","sign","id","process","env","SECRET_KEY","expiresIn","catch","error","currentUser","update","updatedUser","subject","htmlOutput","redirect","findAll","users","userId","destroy","deletedUser","errorMessage"],"mappings":"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","file":"user.js","sourcesContent":["import dotenv from 'dotenv';\n// import Validator from 'validatorjs';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport models from '../models';\nimport mailer from '../middleware/mailer';\n\nconst { User } = models;\nconst { Events } = models;\nconst { Op } = models.sequelize;\ndotenv.config();\n\n/**\n * @export\n * @class Events\n */\nexport default class Users {\n  /**\n     * Signup User record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Users\n     */\n  createUser(req, res) {\n    /**\n     * Encrypt Password** */\n    let salt = bcrypt.genSaltSync(Math.floor(Math.random() * 5));\n\n    let {\n      firstName, lastName, email, password\n    } = req.body;\n    let role = req.body.role || false;\n    let encryptedPassword = bcrypt.hashSync(password, salt);\n\n    User.findOne({\n      where: {\n        email: {\n          [Op.iLike]: email\n        }\n      }\n    })\n      .then((foundUser) => {\n        if (foundUser) {\n          return res.status(401).json({\n            statusCode: 401,\n            message: 'Email has been taken, Please Choose another'\n          });\n        }\n        return User.create({\n          firstName,\n          lastName,\n          email,\n          password: encryptedPassword,\n          role\n        })\n          .then(user => res.status(201)\n            .send({\n              statusCode: 201,\n              message: `Account Created for ${user.firstName} ${user.lastName}`\n            }));\n      });\n  }\n\n  /**\n     * Signin User record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Users\n     */\n  loginUser(req, res) {\n    let { email, password } = req.body;\n    User.findOne({\n      where: {\n        email: {\n          [Op.iLike]: email\n        }\n      }\n    })\n      .then((foundUser) => {\n        if (!foundUser) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: 'User Not Found! Please Sign Up'\n          });\n        } else if (bcrypt.compareSync(password, foundUser.password)) {\n          return res.status(200).send({\n            statusCode: 200,\n            message: 'Here`s your Token',\n            token: jwt.sign({\n              id: foundUser.id,\n              firstName: foundUser.firstName,\n              lastName: foundUser.lastName,\n              email: foundUser.email,\n              role: foundUser.role\n            }, process.env.SECRET_KEY, { expiresIn: '24h' })\n          });\n        }\n        return res.status(401).send({\n          statusCode: 401,\n          message: 'Wrong password',\n        });\n      })\n      .catch(error => res.status(400).send(error));\n  }\n\n  /**\n     * GETS Current User record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Users\n     */\n  currUser(req, res) {\n    return res.send({\n      currentUser: req.currentUser\n    });\n  }\n\n  /**\n     * Assign a User as admin\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Users\n     */\n  assignAdmin(req, res) {\n    let { email, password } = req.body;\n    User.findOne({\n      where: {\n        email: {\n          [Op.iLike]: email\n        }\n      }\n    })\n      .then((foundUser) => {\n        if (!foundUser) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: 'User Not Found! Please Sign Up'\n          });\n        } else if (bcrypt.compareSync(password, foundUser.password)) {\n          // update user role to true...\n          User.update({ role: true }, {\n            where: {\n              id: foundUser.id\n            }\n          })\n            .then((updatedUser) => {\n              let subject = 'Boots Events Manager: Administrator Assignment';\n              let htmlOutput = `\n                            <h6>Boots Events Manager: Administrator Assignment</h6>\n                            <p>Dear, ${foundUser.firstName} ${foundUser.lastName} you have been Assigned as Administrator</p>\n                            <br />\n                            <ul>\n                                <li>First Name: ${foundUser.firstName}</li>\n                                <li>Last Name: ${foundUser.lastName}</li>\n                                <li>Email: ${foundUser.email}</li>\n                            </ul>\n                            <br />\n                            <h6>Admin Privileges</h6>\n                            <ul>\n                                <li>Centers: creation, updating, deleting</li>\n                            </ul>\n                        `;\n              mailer(foundUser.email, subject, subject, htmlOutput);\n              return res.redirect('/');\n            });\n        } else {\n          return res.status(401).send({\n            statusCode: 401,\n            message: 'Wrong password'\n          });\n        }\n      })\n      .catch(error => res.status(500).send(error));\n  }\n\n  /**\n     * GETS all User record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Users\n     */\n  allUsers(req, res) {\n    User.findAll()\n      .then(users => res.status(200).send({\n        message: 'all users found',\n        statusCode: 200,\n        users\n      }))\n      .catch(error => res.status(500).send(error));\n  }\n\n  /**\n     * DELETE a User record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Users\n     */\n  removeUsers(req, res) {\n    let { userId } = req.body;\n    User.findOne({\n      where: {\n        id: userId\n      }\n    })\n      .then((foundUser) => {\n        if (foundUser) {\n          User.destroy({\n            where: {\n              id: foundUser.id\n            }\n          })\n            .then((deletedUser) => {\n              if (deletedUser) {\n                res.status(200).send({\n                  message: 'User has been deleted successfully',\n                  user: foundUser\n                });\n              } else {\n                res.send({\n                  message: 'User was not deleted, please try again'\n                });\n              }\n            })\n            .catch(error => res.status(500).send({\n              error: true,\n              message: 'Houston we have a problem.!! Error deleting User',\n              errorMessage: error\n            }));\n        } else {\n          res.status(404).send({\n            message: 'User was not found',\n          });\n        }\n      });\n  }\n}\n"]}