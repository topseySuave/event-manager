{"version":3,"sources":["../../server/controllers/center.js"],"names":["Op","sequelize","Center","Centers","Events","sortSearchRequest","search","filterBy","reqSearch","map","value","location","iLike","title","price","capacity","req","res","findOne","where","body","then","centers","length","status","json","message","statusCode","create","img_url","description","facilities","parseInt","send","center","catch","success","error","err","centerId","params","id","isNaN","findById","update","order","query","include","model","as","centr","limitValue","limit","pageValue","next","filter","split","findAll","or","offset","searchResults","page","totalCount","pageCount","Math","ceil","pageSize","findAndCountAll","count","rows","deletedCenter","destroy"],"mappings":"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","file":"center.js","sourcesContent":["import models from '../models';\r\n// import path from 'path';\r\n// import fs from 'fs';\r\n// import cloudinary from 'cloudinary';\r\n\r\n// dotenv.config();\r\nconst Op = models.sequelize.Op;\r\nconst Center = models.Centers;\r\nconst { Events } = models;\r\n\r\n\r\nconst sortSearchRequest = (search, filterBy) => {\r\n  let reqSearch;\r\n  // Search with location, title, price, capacity\r\n  if (filterBy === 'location') {\r\n    reqSearch = search.map((value) => {\r\n      if (value !== '') {\r\n        return {\r\n          location: {\r\n            [Op.iLike]: `%${value}%`\r\n          }\r\n        };\r\n      }\r\n    });\r\n  } else if (filterBy === 'title') {\r\n    reqSearch = search.map((value) => {\r\n      if (value !== '') {\r\n        return {\r\n          title: {\r\n            [Op.iLike]: `%${value}%`\r\n          }\r\n        };\r\n      }\r\n    });\r\n  } else if (filterBy === 'price') {\r\n    reqSearch = search.map((value) => {\r\n      if (value !== '') {\r\n        return {\r\n          price: {\r\n            [Op.iLike]: `%${value}%`\r\n          }\r\n        };\r\n      }\r\n    });\r\n  } else if (filterBy === 'capacity') {\r\n    reqSearch = search.map((value) => {\r\n      if (value !== '') {\r\n        return {\r\n          capacity: {\r\n            [Op.iLike]: `%${value}%`\r\n          }\r\n        };\r\n      }\r\n    });\r\n  }\r\n  return reqSearch;\r\n};\r\n\r\n/**\r\n * @export\r\n * @class Center\r\n */\r\nexport class Centers {\r\n  /**\r\n     * Add Center record\r\n     *\r\n     * @API POST request '/api/v1/centers'\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Center\r\n     */\r\n  createCenter(req, res) {\r\n    // check if center name already exist\r\n    return Center.findOne({\r\n      where: {\r\n        title: req.body.title,\r\n        location: req.body.location\r\n      }\r\n    })\r\n      .then((centers) => {\r\n        // return this if  center name is taken\r\n        if (centers) {\r\n          if (centers.length > 0) {\r\n            return res.status(400).json({\r\n              message: 'Center already exist',\r\n              statusCode: 400\r\n            });\r\n          }\r\n        }\r\n\r\n        // cloudinary.config({\r\n        //     cloud_name: 'dcbqn1c10',\r\n        //     api_key: '441952115171911',\r\n        //     api_secret: 'RMaPGLJFey85McETvjNUkH_6SyE'\r\n        // });\r\n        // cloudinary.uploader.upload(req.files.image.path, (res) => {\r\n        //     console.log(res);\r\n        // });\r\n\r\n        return Center.create({\r\n          title: req.body.title,\r\n          img_url: req.body.img_url,\r\n          location: req.body.location,\r\n          description: req.body.description,\r\n          facilities: req.body.facilities,\r\n          capacity: parseInt(req.body.capacity, 10),\r\n          price: parseInt(req.body.price, 10)\r\n        })\r\n          .then(center => res.status(201).send({\r\n            statusCode: 201,\r\n            message: 'Center has been created',\r\n            center\r\n          }))\r\n\r\n          .catch(err => res.status(500).send({\r\n            statusCode: 500,\r\n            success: false,\r\n            message: 'Center cannot be created',\r\n            error: err\r\n          }));\r\n      });\r\n  }\r\n\r\n  /**\r\n     * Update Or Modify Center record\r\n     *\r\n     * @API POST request '/api/v1/centers/:id'\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Center\r\n     */\r\n  updateCenter(req, res) {\r\n    const centerId = parseInt(req.params.id, 10);\r\n    if (isNaN(centerId)) {\r\n      return res.status(400).send({\r\n        message: 'Center id is not a number',\r\n        error: true\r\n      });\r\n    }\r\n\r\n    Center.findById(centerId)\r\n      .then((center) => {\r\n        if (!center) {\r\n          return res.status(404).send({\r\n            statusCode: 404,\r\n            message: `Center not Found with ${centerId}`\r\n          });\r\n        }\r\n\r\n        Center.update(\r\n          {\r\n            title: req.body.title || center.title,\r\n            img_url: req.body.img_url || center.img_url,\r\n            location: req.body.location || center.location,\r\n            description: req.body.description || center.description,\r\n            facilities: req.body.facilities || center.facilities,\r\n            capacity: parseInt(req.body.capacity, 10) || center.capacity,\r\n            price: parseInt(req.body.price, 10) || center.price,\r\n          },\r\n          {\r\n            where: {\r\n              id: req.body.id\r\n            }\r\n          }\r\n        )\r\n          .then(centerUpdated => res.status(200).send({\r\n            statusCode: 200,\r\n            message: 'Center has been created',\r\n            center\r\n          }))\r\n          .catch(error => res.status(500).send(error));\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  /**\r\n     * Get Center by id\r\n     *\r\n     * @API GET request '/api/v1/centers/:id'\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Center\r\n     */\r\n  getCenter(req, res) {\r\n    const order = req.query.order || 'desc';\r\n    const centerId = parseInt(req.params.id, 10);\r\n    if (isNaN(centerId)) {\r\n      return res.status(400).send({\r\n        message: 'Center id is not a number',\r\n        error: true\r\n      });\r\n    }\r\n\r\n    Center.findOne({\r\n      where: {\r\n        id: centerId\r\n      },\r\n      include: [\r\n        {\r\n          model: Events,\r\n          as: 'events'\r\n        }\r\n      ],\r\n      order: [\r\n        ['id', order]\r\n      ]\r\n    })\r\n      .then((centr) => {\r\n        if (!centr) {\r\n          return res.status(404).send({\r\n            statusCode: 404,\r\n            message: `Center with id: ${centerId} does not exist`,\r\n          });\r\n        }\r\n\r\n        return res.status(200).send({\r\n          statusCode: 200,\r\n          message: `Center with id: ${centerId} was found`,\r\n          centr,\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n     * Get Centers record\r\n     *\r\n     * @API GET request '/api/v1/centers[?search=<search-query>&limit=<limit>&order=<desc || asc>]'\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Centers\r\n     */\r\n  getCenters(req, res) {\r\n    const limitValue = parseInt(req.query.limit, 10) || 5;\r\n    const pageValue = req.query.next || 0;\r\n    const order = req.query.order || 'desc';\r\n    if (req.query.search || req.query.limit) {\r\n      let filterBy, reqSearch;\r\n      if (req.query.filter) {\r\n        filterBy = req.query.filter;\r\n      }\r\n      const search = req.query.search.split(',');\r\n\r\n      reqSearch = sortSearchRequest(search, filterBy);\r\n      Center.findAll({\r\n        where: {\r\n          [Op.or]: reqSearch\r\n        },\r\n        order: [\r\n          ['id', order]\r\n        ],\r\n        limit: limitValue,\r\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\r\n      })\r\n        .then((searchResults) => {\r\n          if (searchResults.length <= 0) {\r\n            return res.status(404).send({\r\n              statusCode: 404,\r\n              message: 'Center(s) do not match your search result'\r\n            });\r\n          }\r\n\r\n          return res.status(200).send({\r\n            statusCode: 200,\r\n            message: 'Successful Centers!',\r\n            page: (pageValue) ? parseInt(pageValue, 10) : parseInt(pageValue + 1, 10),\r\n            totalCount: searchResults.length,\r\n            pageCount: Math.ceil(searchResults.length / limitValue),\r\n            pageSize: parseInt(searchResults.length, 10),\r\n            centers: searchResults,\r\n          });\r\n        });\r\n    } else {\r\n      Center.findAndCountAll({\r\n        order: [\r\n          ['id', order]\r\n        ],\r\n        limit: limitValue,\r\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\r\n      })\r\n        .then((center) => {\r\n          if (!center) {\r\n            return res.status(404).send({\r\n              statusCode: 404,\r\n              message: 'No result found',\r\n            });\r\n          }\r\n\r\n          return res.status(200).send({\r\n            statusCode: 200,\r\n            message: 'Successful Centers!',\r\n            page: (pageValue) ? parseInt(pageValue, 10) : parseInt(pageValue + 1, 10),\r\n            totalCount: center.count,\r\n            pageCount: Math.ceil(center.count / limitValue),\r\n            pageSize: parseInt(center.rows.length, 10),\r\n            centers: center.rows,\r\n          });\r\n        })\r\n        .catch(err => res.status(500).send({\r\n          statusCode: 500,\r\n          message: 'Internal server Error!',\r\n          error: err\r\n        }));\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Delete Center record\r\n     *\r\n     * @API DELETE request '/api/v1/centers/:id'\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Center\r\n     */\r\n  deleteCenter(req, res) {\r\n    const centerId = parseInt(req.params.id, 10);\r\n    if (isNaN(centerId)) {\r\n      return res.status(400).send({\r\n        statusCode: 400,\r\n        message: 'Center id is not a number'\r\n      });\r\n    }\r\n    Center.findById(centerId)\r\n      .then((deletedCenter) => {\r\n        if (!deletedCenter) {\r\n          return res.status(400).send({\r\n            statusCode: 400,\r\n            message: `Center not found with id : ${centerId}`\r\n          });\r\n        }\r\n        Center\r\n          .destroy({\r\n            where: {\r\n              id: centerId,\r\n            }\r\n          })\r\n          .then(() => res.status(200).send({\r\n            statusCode: 200,\r\n            message: 'This Center has been deleted'\r\n          }));\r\n      })\r\n      .catch(() => res.status(500).send({\r\n        statusCode: 500,\r\n        message: 'Error deleting Center'\r\n      }));\r\n  }\r\n}\r\n\r\nexport default Centers;\r\n"]}