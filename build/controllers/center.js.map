{"version":3,"sources":["../../server/controllers/center.js"],"names":["Op","sequelize","Center","Centers","Event","Events","sortSearchRequest","search","filterBy","reqSearch","map","value","location","iLike","price","capacity","title","req","res","findOne","where","body","then","centers","length","status","json","message","statusCode","create","img_url","description","facilities","parseInt","send","center","catch","success","error","err","order","query","limitValue","limit","process","env","DATA_LIMIT","centerId","params","id","isNaN","findById","centr","console","log","update","updatedCenter","findAndCountAll","startDate","gte","Date","toDateString","event","rows","events","errorMessage","pageValue","next","filter","split","findAll","or","offset","searchResults","page","totalCount","pageCount","Math","ceil","pageSize","count","deletedCenter","destroy"],"mappings":"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","file":"center.js","sourcesContent":["import models from '../models';\n\n// dotenv.config();\nconst { Op } = models.sequelize;\nconst Center = models.Centers;\nconst Event = models.Events;\n\n\nconst sortSearchRequest = (search, filterBy) => {\n  let reqSearch;\n  // Search with location, title, price, capacity\n  if (filterBy === 'location') {\n    reqSearch = search.map((value) => {\n      if (value !== '') {\n        return {\n          location: {\n            [Op.iLike]: `%${value}%`\n          }\n        };\n      }\n    });\n  } else if (filterBy === 'price') {\n    reqSearch = search.map((value) => {\n      if (value !== '') {\n        return {\n          price: {\n            [Op.iLike]: `%${value}%`\n          }\n        };\n      }\n    });\n  } else if (filterBy === 'capacity') {\n    reqSearch = search.map((value) => {\n      if (value !== '') {\n        return {\n          capacity: {\n            [Op.iLike]: `%${value}%`\n          }\n        };\n      }\n    });\n  } else {\n    reqSearch = search.map((value) => {\n      if (value !== '') {\n        return {\n          title: {\n            [Op.iLike]: `%${value}%`\n          }\n        };\n      }\n    });\n  }\n  return reqSearch;\n};\n\n/**\n * @export\n * @class Centers\n */\nexport class Centers {\n  /**\n     * Add Center record\n     *\n     * @API POST request '/api/v1/centers'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Center\n     */\n  createCenter(req, res) {\n    // check if center name already exist\n    return Center.findOne({\n      where: {\n        title: req.body.title,\n        location: req.body.location\n      }\n    })\n      .then((centers) => {\n        // return this if  center name is taken\n        if (centers) {\n          if (centers.length > 0) {\n            return res.status(400).json({\n              message: 'Center already exist',\n              statusCode: 400\n            });\n          }\n        }\n\n        return Center.create({\n          title: req.body.title,\n          img_url: req.body.img_url,\n          location: req.body.location,\n          description: req.body.description,\n          facilities: req.body.facilities,\n          capacity: parseInt(req.body.capacity, 10),\n          price: parseInt(req.body.price, 10)\n        })\n          .then(center => res.status(201).send({\n            statusCode: 201,\n            message: 'Center has been created',\n            center\n          }))\n\n          .catch(err => res.status(400).send({\n            statusCode: 400,\n            success: false,\n            message: 'Center cannot be created',\n            error: err\n          }));\n      });\n  }\n\n  /**\n     * Update Or Modify Center record\n     *\n     * @API POST request '/api/v1/centers/:id'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Center\n     */\n  updateCenter(req, res) {\n    const order = req.query.order || 'desc';\n    const limitValue = req.query.limit || process.env.DATA_LIMIT;\n    const centerId = parseInt(req.params.id, 10);\n    if (isNaN(centerId)) {\n      return res.status(400).send({\n        message: 'Center id is not a number',\n        error: true\n      });\n    }\n\n    Center.findById(centerId)\n      .then((centr) => {\n        console.log(centr);\n        if (!centr) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: `Center not Found with ${centerId}`\n          });\n        }\n\n        Center.update(\n          {\n            title: req.body.title || centr.title,\n            img_url: req.body.img_url || centr.img_url,\n            location: req.body.location || centr.location,\n            description: req.body.description || centr.description,\n            facilities: req.body.facilities || centr.facilities,\n            capacity: parseInt(req.body.capacity, 10) || centr.capacity,\n            price: parseInt(req.body.price, 10) || centr.price,\n          },\n          {\n            where: {\n              id: centerId\n            }\n          }\n        )\n          .then((updatedCenter) => {\n            if (updatedCenter) {\n              Event.findAndCountAll({\n                where: {\n                  centerId,\n                  startDate: {\n                    [Op.gte]: new Date().toDateString()\n                  }\n                },\n                order: [\n                  ['id', order]\n                ],\n                limit: limitValue\n              })\n                .then((event) => {\n                  centr.event = event.rows;\n                  return res.status(200).send({\n                    statusCode: 200,\n                    message: 'Center has been updated',\n                    events: event.rows,\n                    centr,\n                  });\n                })\n                .catch((err) => {\n                  if (err) {\n                    return res.status(400).send({\n                      statusCode: 400,\n                      message: 'Error getting events'\n                    });\n                  }\n                });\n            }\n          })\n          .catch(err => res.status(400).send({\n            error: true,\n            message: 'Error Updating center',\n            errorMessage: err\n          }));\n      });\n  }\n\n  /**\n     * Get Center by id\n     *\n     * @API GET request '/api/v1/centers/:id'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Center\n     */\n  getCenter(req, res) {\n    const order = req.query.order || 'desc';\n    const limitValue = req.query.limit || process.env.DATA_LIMIT;\n    const centerId = parseInt(req.params.id, 10);\n    if (isNaN(centerId)) {\n      return res.status(400).send({\n        message: 'Center id is not a number',\n        error: true\n      });\n    }\n\n    Center.findOne({\n      where: {\n        id: centerId\n      }\n    })\n      .then((centr) => {\n        if (!centr) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: `Center with id: ${centerId} does not exist`,\n          });\n        }\n\n        return Event.findAndCountAll({\n          where: {\n            centerId,\n            startDate: {\n              [Op.gte]: new Date().toDateString()\n            }\n          },\n          order: [\n            ['id', order]\n          ],\n          limit: limitValue\n        })\n          .then((event) => {\n            centr.event = event.rows;\n            return res.status(200).send({\n              statusCode: 200,\n              message: `Center with id: ${centerId} was found`,\n              events: event.rows,\n              centr,\n            });\n          })\n          .catch((err) => {\n            if (err) {\n              return res.status(400).send({\n                statusCode: 400,\n                message: 'Error getting center details'\n              });\n            }\n          });\n      })\n      .catch((err) => {\n        if (err) {\n          return res.status(400).send({\n            statusCode: 400,\n            message: 'Error getting center details'\n          });\n        }\n      });\n  }\n\n  /**\n     * Get Centers record\n     *\n     * @API GET request '/api/v1/centers[?search=<search-query>&limit=<limit>&order=<desc || asc>]'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Centers\n     */\n  getCenters(req, res) {\n    const limitValue = parseInt(req.query.limit, 10) || process.env.DATA_LIMIT;\n    const pageValue = req.query.next || 0;\n    const order = req.query.order || 'desc';\n    if (req.query.search || req.query.limit) {\n      let filterBy, reqSearch;\n      if (req.query.filter) {\n        filterBy = req.query.filter;\n      }\n      const search = req.query.search.split(' ');\n\n      reqSearch = sortSearchRequest(search, filterBy);\n      Center.findAll({\n        where: {\n          [Op.or]: reqSearch\n        },\n        order: [\n          ['id', order]\n        ],\n        limit: limitValue,\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\n      })\n        .then((searchResults) => {\n          if (searchResults.length <= 0) {\n            return res.status(404).send({\n              statusCode: 404,\n              message: 'Center(s) do not match your search result'\n            });\n          }\n\n          return res.status(200).send({\n            statusCode: 200,\n            message: 'Successful Centers!',\n            page: (pageValue) ? parseInt(pageValue, 10) : parseInt(pageValue + 1, 10),\n            totalCount: searchResults.length,\n            pageCount: Math.ceil(searchResults.length / limitValue),\n            pageSize: parseInt(searchResults.length, 10),\n            centers: searchResults,\n          });\n        });\n    } else {\n      Center.findAndCountAll({\n        order: [\n          ['id', order]\n        ],\n        limit: limitValue,\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\n      })\n        .then((center) => {\n          if (!center) {\n            return res.status(404).send({\n              statusCode: 404,\n              message: 'No result found',\n            });\n          }\n\n          return res.status(200).send({\n            statusCode: 200,\n            message: 'Successful Centers!',\n            page: (pageValue) ? parseInt(pageValue, 10) : parseInt(pageValue + 1, 10),\n            totalCount: center.count,\n            pageCount: Math.ceil(center.count / limitValue),\n            pageSize: parseInt(center.rows.length, 10),\n            centers: center.rows,\n          });\n        })\n        .catch(err => res.status(400).send({\n          statusCode: 400,\n          message: 'Couldn\\'t find all centers...!',\n          error: err\n        }));\n    }\n  }\n\n  /**\n     * Delete Center record\n     *\n     * @API DELETE request '/api/v1/centers/:id'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Center\n     */\n  deleteCenter(req, res) {\n    const centerId = parseInt(req.params.id, 10);\n    if (isNaN(centerId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Center id is not a number'\n      });\n    }\n    Center.findById(centerId)\n      .then((deletedCenter) => {\n        if (!deletedCenter) {\n          return res.status(400).send({\n            statusCode: 400,\n            message: `Center not found with id : ${centerId}`\n          });\n        }\n        Center\n          .destroy({\n            where: {\n              id: centerId,\n            }\n          })\n          .then(() => res.status(200).send({\n            statusCode: 200,\n            message: 'This Center has been deleted',\n            center: deletedCenter\n          }));\n      });\n  }\n}\n\nexport default Centers;\n"]}