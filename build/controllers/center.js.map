{"version":3,"sources":["../../server/controllers/center.js"],"names":["Op","sequelize","Center","Centers","Event","Events","sortSearchRequest","search","filterBy","reqSearch","map","value","location","iLike","price","parseInt","capacity","title","req","res","findOne","where","body","then","xCenter","status","json","message","statusCode","create","img_url","description","facilities","center","send","order","query","limitValue","limit","process","env","DATA_LIMIT","centerId","params","id","isNaN","findById","centr","update","updatedCenter","findAndCountAll","startDate","gte","Date","toDateString","event","rows","events","catch","err","errorMessage","pageValue","next","filter","split","findAll","or","offset","searchResults","length","page","totalCount","pageCount","Math","ceil","pageSize","centers","count","deletedCenter","destroy","error"],"mappings":"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","file":"center.js","sourcesContent":["import models from '../models';\n\n// dotenv.config();\nconst { Op } = models.sequelize;\nconst Center = models.Centers;\nconst Event = models.Events;\n\n\nconst sortSearchRequest = (search, filterBy) => {\n  let reqSearch;\n  // Search with location, title, price, capacity\n  if (filterBy === 'location') {\n    reqSearch = search.map((value) => {\n      if (value !== '') {\n        return {\n          location: {\n            [Op.iLike]: `%${value}%`\n          }\n        };\n      }\n    });\n  } else if (filterBy === 'price') {\n    reqSearch = search.map((value) => {\n      if (value !== '') {\n        return {\n          price: {\n            [Op.iLike]: `%${parseInt(value, 10)}%`\n          }\n        };\n      }\n    });\n  } else if (filterBy === 'capacity') {\n    reqSearch = search.map((value) => {\n      if (value !== '') {\n        return {\n          capacity: {\n            [Op.iLike]: `%${parseInt(value, 10)}%`\n          }\n        };\n      }\n    });\n  } else {\n    reqSearch = search.map((value) => {\n      if (value !== '') {\n        return {\n          title: {\n            [Op.iLike]: `%${value}%`\n          }\n        };\n      }\n    });\n  }\n  return reqSearch;\n};\n\n/**\n * @export\n * @class Centers\n */\nexport class Centers {\n  /**\n     * Add Center record\n     *\n     * @API POST request '/api/v1/centers'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Center\n     */\n  createCenter(req, res) {\n    // check if center name already exist\n    return Center.findOne({\n      where: {\n        title: req.body.title,\n        location: req.body.location\n      }\n    })\n      .then((xCenter) => {\n        // return this if center name is taken\n        if (xCenter) {\n          return res.status(400).json({\n            message: 'Center already exist',\n            statusCode: 400\n          });\n        }\n\n        return Center.create({\n          title: req.body.title,\n          img_url: req.body.img_url,\n          location: req.body.location,\n          description: req.body.description,\n          facilities: req.body.facilities,\n          capacity: parseInt(req.body.capacity, 10),\n          price: parseInt(req.body.price, 10)\n        })\n          .then((center) => {\n            if (center) {\n              res.status(201).send({\n                statusCode: 201,\n                message: 'Center has been created',\n                center\n              });\n            }\n          });\n      });\n  }\n\n  /**\n     * Update Or Modify Center record\n     *\n     * @API POST request '/api/v1/centers/:id'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Center\n     */\n  updateCenter(req, res) {\n    const order = req.query.order || 'desc';\n    const limitValue = req.query.limit || process.env.DATA_LIMIT;\n    const centerId = parseInt(req.params.id, 10);\n    if (isNaN(centerId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Center id is not a number'\n      });\n    }\n\n    Center.findById(centerId)\n      .then((centr) => {\n        if (!centr) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: `Center not Found with ${centerId}`\n          });\n        }\n\n        Center.update(\n          {\n            title: req.body.title || centr.title,\n            img_url: req.body.img_url || centr.img_url,\n            location: req.body.location || centr.location,\n            description: req.body.description || centr.description,\n            facilities: req.body.facilities || centr.facilities,\n            capacity: parseInt(req.body.capacity, 10) || centr.capacity,\n            price: parseInt(req.body.price, 10) || centr.price,\n          },\n          {\n            where: {\n              id: centerId\n            }\n          }\n        )\n          .then((updatedCenter) => {\n            if (updatedCenter) {\n              Event.findAndCountAll({\n                where: {\n                  centerId,\n                  startDate: {\n                    [Op.gte]: new Date().toDateString()\n                  }\n                },\n                order: [\n                  ['id', order]\n                ],\n                limit: limitValue\n              })\n                .then((event) => {\n                  centr.event = event.rows;\n                  return res.status(200).send({\n                    statusCode: 200,\n                    message: 'Center has been updated',\n                    events: event.rows,\n                    centr\n                  });\n                })\n                .catch((err) => {\n                  if (err) {\n                    return res.status(400).send({\n                      statusCode: 400,\n                      message: 'Error getting events'\n                    });\n                  }\n                });\n            }\n          })\n          .catch(err => res.status(400).send({\n            message: 'Error Updating center',\n            errorMessage: err\n          }));\n      });\n  }\n\n  /**\n     * Get Center by id\n     *\n     * @API GET request '/api/v1/centers/:id'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Center\n     */\n  getCenter(req, res) {\n    const order = req.query.order || 'desc';\n    const limitValue = req.query.limit || process.env.DATA_LIMIT;\n    const centerId = parseInt(req.params.id, 10);\n    if (isNaN(centerId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Center id is not a number'\n      });\n    }\n\n    Center.findOne({\n      where: {\n        id: centerId\n      }\n    })\n      .then((centr) => {\n        if (!centr) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: `Center with id: ${centerId} does not exist`,\n          });\n        }\n\n        return Event.findAndCountAll({\n          where: {\n            centerId,\n            startDate: {\n              [Op.gte]: new Date().toDateString()\n            }\n          },\n          order: [\n            ['id', order]\n          ],\n          limit: limitValue\n        })\n          .then((event) => {\n            centr.event = event.rows;\n            return res.status(200).send({\n              statusCode: 200,\n              message: `Center with id: ${centerId} was found`,\n              events: event.rows,\n              centr,\n            });\n          });\n      });\n  }\n\n  /**\n     * Get Centers record\n     *\n     * @API GET request '/api/v1/centers[?search=<search-query>&limit=<limit>&order=<desc || asc>]'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Centers\n     */\n  getCenters(req, res) {\n    const limitValue = parseInt(req.query.limit, 10) || process.env.DATA_LIMIT;\n    const pageValue = req.query.next || 0;\n    const order = req.query.order || 'desc';\n    if (req.query.search || req.query.limit) {\n      let filterBy, reqSearch;\n      if (req.query.filter) {\n        filterBy = req.query.filter;\n      }\n      const search = req.query.search.split(' ');\n\n      reqSearch = sortSearchRequest(search, filterBy);\n      Center.findAll({\n        where: {\n          [Op.or]: reqSearch\n        },\n        order: [\n          ['id', order]\n        ],\n        limit: limitValue,\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\n      })\n        .then((searchResults) => {\n          if (searchResults.length <= 0) {\n            return res.status(404).send({\n              statusCode: 404,\n              message: 'Center(s) do not match your search result'\n            });\n          }\n\n          return res.status(200).send({\n            statusCode: 200,\n            message: 'Successful Centers!',\n            page: (pageValue) ? parseInt(pageValue, 10) : parseInt(pageValue + 1, 10),\n            totalCount: searchResults.length,\n            pageCount: Math.ceil(searchResults.length / limitValue),\n            pageSize: parseInt(searchResults.length, 10),\n            centers: searchResults,\n          });\n        });\n    } else {\n      Center.findAndCountAll({\n        order: [\n          ['id', order]\n        ],\n        limit: limitValue,\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\n      })\n        .then(center => res.status(200).send({\n          statusCode: 200,\n          message: 'Successful Centers!',\n          page: (pageValue) ? parseInt(pageValue, 10) : parseInt(pageValue + 1, 10),\n          totalCount: center.count,\n          pageCount: Math.ceil(center.count / limitValue),\n          pageSize: parseInt(center.rows.length, 10),\n          centers: center.rows,\n        }));\n    }\n  }\n\n  /**\n     * Delete Center record\n     *\n     * @API DELETE request '/api/v1/centers/:id'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Center\n     */\n  deleteCenter(req, res) {\n    const centerId = parseInt(req.params.id, 10);\n    if (isNaN(centerId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Center id is not a number'\n      });\n    }\n\n    Center.findById(centerId)\n      .then((deletedCenter) => {\n        if (!deletedCenter) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: `Center not found with id : ${centerId}`\n          });\n        }\n\n        Center\n          .destroy({\n            where: {\n              id: centerId,\n            }\n          })\n          .then(() => res.status(200).send({\n            statusCode: 200,\n            message: 'This Center has been deleted',\n            center: deletedCenter\n          }));\n      })\n      .catch((err) => {\n        res.status(400).send({\n          statusCode: 400,\n          message: 'Center not found',\n          error: err\n        });\n      });\n  }\n}\n\nexport default Centers;\n"]}