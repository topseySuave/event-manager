{"version":3,"sources":["../../server/controllers/center.js"],"names":["Op","sequelize","Center","Centers","Event","Events","sortSearchRequest","search","filterBy","reqSearch","map","value","location","iLike","price","capacity","title","req","res","findOne","where","body","then","centers","length","status","json","message","statusCode","create","img_url","description","facilities","parseInt","send","center","catch","success","error","err","order","query","limitValue","limit","process","env","DATA_LIMIT","centerId","params","id","isNaN","findById","centr","update","updatedCenter","findAndCountAll","startDate","gte","Date","toDateString","event","rows","events","errorMessage","pageValue","next","filter","split","findAll","or","offset","searchResults","page","totalCount","pageCount","Math","ceil","pageSize","count","deletedCenter","destroy"],"mappings":"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","file":"center.js","sourcesContent":["import models from '../models';\r\n// import path from 'path';\r\n// import fs from 'fs';\r\n// import cloudinary from 'cloudinary';\r\n\r\n// dotenv.config();\r\nconst { Op } = models.sequelize;\r\nconst Center = models.Centers;\r\nconst Event = models.Events;\r\n\r\n\r\nconst sortSearchRequest = (search, filterBy) => {\r\n  let reqSearch;\r\n  // Search with location, title, price, capacity\r\n  if (filterBy === 'location') {\r\n    reqSearch = search.map((value) => {\r\n      if (value !== '') {\r\n        return {\r\n          location: {\r\n            [Op.iLike]: `%${value}%`\r\n          }\r\n        };\r\n      }\r\n    });\r\n  } else if (filterBy === 'price') {\r\n    reqSearch = search.map((value) => {\r\n      if (value !== '') {\r\n        return {\r\n          price: {\r\n            [Op.iLike]: `%${value}%`\r\n          }\r\n        };\r\n      }\r\n    });\r\n  } else if (filterBy === 'capacity') {\r\n    reqSearch = search.map((value) => {\r\n      if (value !== '') {\r\n        return {\r\n          capacity: {\r\n            [Op.iLike]: `%${value}%`\r\n          }\r\n        };\r\n      }\r\n    });\r\n  } else {\r\n    reqSearch = search.map((value) => {\r\n        if (value !== '') {\r\n            return {\r\n                title: {\r\n                    [Op.iLike]: `%${value}%`\r\n                }\r\n            };\r\n        }\r\n    });\r\n  }\r\n  return reqSearch;\r\n};\r\n\r\n/**\r\n * @export\r\n * @class Center\r\n */\r\nexport class Centers {\r\n  /**\r\n     * Add Center record\r\n     *\r\n     * @API POST request '/api/v1/centers'\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Center\r\n     */\r\n  createCenter(req, res) {\r\n    // check if center name already exist\r\n    return Center.findOne({\r\n      where: {\r\n        title: req.body.title,\r\n        location: req.body.location\r\n      }\r\n    })\r\n      .then((centers) => {\r\n        // return this if  center name is taken\r\n        if (centers) {\r\n          if (centers.length > 0) {\r\n            return res.status(400).json({\r\n              message: 'Center already exist',\r\n              statusCode: 400\r\n            });\r\n          }\r\n        }\r\n\r\n        // cloudinary.config({\r\n        //     cloud_name: 'dcbqn1c10',\r\n        //     api_key: '441952115171911',\r\n        //     api_secret: 'RMaPGLJFey85McETvjNUkH_6SyE'\r\n        // });\r\n        // cloudinary.uploader.upload(req.files.image.path, (res) => {\r\n        //     console.log(res);\r\n        // });\r\n\r\n        return Center.create({\r\n          title: req.body.title,\r\n          img_url: req.body.img_url,\r\n          location: req.body.location,\r\n          description: req.body.description,\r\n          facilities: req.body.facilities,\r\n          capacity: parseInt(req.body.capacity, 10),\r\n          price: parseInt(req.body.price, 10)\r\n        })\r\n          .then(center => res.status(201).send({\r\n            statusCode: 201,\r\n            message: 'Center has been created',\r\n            center\r\n          }))\r\n\r\n          .catch(err => res.status(500).send({\r\n            statusCode: 500,\r\n            success: false,\r\n            message: 'Center cannot be created',\r\n            error: err\r\n          }));\r\n      });\r\n  }\r\n\r\n  /**\r\n     * Update Or Modify Center record\r\n     *\r\n     * @API POST request '/api/v1/centers/:id'\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Center\r\n     */\r\n  updateCenter(req, res) {\r\n    const order = req.query.order || 'desc';\r\n    const limitValue = req.query.limit || process.env.DATA_LIMIT;\r\n    const centerId = parseInt(req.params.id, 10);\r\n    if (isNaN(centerId)) {\r\n      return res.status(400).send({\r\n        message: 'Center id is not a number',\r\n        error: true\r\n      });\r\n    }\r\n\r\n    Center.findById(centerId)\r\n      .then((centr) => {\r\n        if (!centr) {\r\n          return res.status(404).send({\r\n            statusCode: 404,\r\n            message: `Center not Found with ${centerId}`\r\n          });\r\n        }\r\n\r\n        Center.update({\r\n          title: req.body.title || center.title,\r\n          img_url: req.body.img_url || center.img_url,\r\n          location: req.body.location || center.location,\r\n          description: req.body.description || center.description,\r\n          facilities: req.body.facilities || center.facilities,\r\n          capacity: parseInt(req.body.capacity, 10) || center.capacity,\r\n          price: parseInt(req.body.price, 10) || center.price,\r\n        },\r\n        {\r\n          where: {\r\n            id: centerId\r\n          }\r\n        })\r\n          .then((updatedCenter) => {\r\n            if(updatedCenter){\r\n              Event.findAndCountAll({\r\n                  where: {\r\n                    centerId,\r\n                    startDate: {\r\n                      [Op.gte]: new Date().toDateString()\r\n                    }\r\n                  },\r\n                  order: [\r\n                    ['id', order]\r\n                  ],\r\n                  limit: limitValue\r\n                })\r\n                  .then((event) => {\r\n                    centr.event = event.rows;\r\n                    return res.status(200).send({\r\n                      statusCode: 200,\r\n                      message: `Center has been updated`,\r\n                      events: event.rows,\r\n                      centr,\r\n                    });\r\n                  })\r\n                  .catch((err) => {\r\n                    if(err){\r\n                      return res.status(500).send({\r\n                        statusCode: 500,\r\n                        message: `Error getting events`\r\n                      });\r\n                    }\r\n                  })\r\n            }\r\n          })\r\n          .catch(err => res.status(500).send({\r\n            error: true,\r\n            message: `Error Updating center`,\r\n            errorMessage: err\r\n          }));\r\n      })\r\n      .catch(error => res.status(500).send({\r\n          error: true,\r\n          message: `Error finding center`,\r\n          errorMessage: error\r\n      }));\r\n  }\r\n\r\n  /**\r\n     * Get Center by id\r\n     *\r\n     * @API GET request '/api/v1/centers/:id'\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Center\r\n     */\r\n  getCenter(req, res) {\r\n    const order = req.query.order || 'desc';\r\n    const limitValue = req.query.limit || process.env.DATA_LIMIT;\r\n    const centerId = parseInt(req.params.id, 10);\r\n    if (isNaN(centerId)) {\r\n      return res.status(400).send({\r\n        message: 'Center id is not a number',\r\n        error: true\r\n      });\r\n    }\r\n\r\n    Center.findOne({\r\n      where: {\r\n        id: centerId\r\n      }\r\n    })\r\n      .then((centr) => {\r\n        if (!centr) {\r\n          return res.status(404).send({\r\n            statusCode: 404,\r\n            message: `Center with id: ${centerId} does not exist`,\r\n          });\r\n        }\r\n\r\n        return Event.findAndCountAll({\r\n          where: {\r\n            centerId,\r\n            startDate: {\r\n              [Op.gte]: new Date().toDateString()\r\n            }\r\n          },\r\n          order: [\r\n              ['id', order]\r\n          ],\r\n          limit: limitValue\r\n        })\r\n          .then((event) => {\r\n            centr.event = event.rows;\r\n            return res.status(200).send({\r\n              statusCode: 200,\r\n              message: `Center with id: ${centerId} was found`,\r\n              events: event.rows,\r\n              centr,\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            if(err){\r\n              return res.status(500).send({\r\n                statusCode: 500,\r\n                message: `Error getting center details`\r\n              });\r\n            }\r\n          })\r\n      })\r\n        .catch((err) => {\r\n          if(err){\r\n            return res.status(500).send({\r\n              statusCode: 500,\r\n              message: `Error getting center details`\r\n            });\r\n          }\r\n        });\r\n  }\r\n\r\n  /**\r\n     * Get Centers record\r\n     *\r\n     * @API GET request '/api/v1/centers[?search=<search-query>&limit=<limit>&order=<desc || asc>]'\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Centers\r\n     */\r\n  getCenters(req, res) {\r\n    const limitValue = parseInt(req.query.limit, 10) || process.env.DATA_LIMIT;\r\n    const pageValue = req.query.next || 0;\r\n    const order = req.query.order || 'desc';\r\n    if (req.query.search || req.query.limit) {\r\n      let filterBy, reqSearch;\r\n      if (req.query.filter) {\r\n        filterBy = req.query.filter;\r\n      }\r\n      const search = req.query.search.split(' ');\r\n\r\n      reqSearch = sortSearchRequest(search, filterBy);\r\n      Center.findAll({\r\n        where: {\r\n          [Op.or]: reqSearch\r\n        },\r\n        order: [\r\n          ['id', order]\r\n        ],\r\n        limit: limitValue,\r\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\r\n      })\r\n        .then((searchResults) => {\r\n          if (searchResults.length <= 0) {\r\n            return res.status(404).send({\r\n              statusCode: 404,\r\n              message: 'Center(s) do not match your search result'\r\n            });\r\n          }\r\n\r\n          return res.status(200).send({\r\n            statusCode: 200,\r\n            message: 'Successful Centers!',\r\n            page: (pageValue) ? parseInt(pageValue, 10) : parseInt(pageValue + 1, 10),\r\n            totalCount: searchResults.length,\r\n            pageCount: Math.ceil(searchResults.length / limitValue),\r\n            pageSize: parseInt(searchResults.length, 10),\r\n            centers: searchResults,\r\n          });\r\n        });\r\n    } else {\r\n      Center.findAndCountAll({\r\n        order: [\r\n          ['id', order]\r\n        ],\r\n        limit: limitValue,\r\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\r\n      })\r\n        .then((center) => {\r\n          if (!center) {\r\n            return res.status(404).send({\r\n              statusCode: 404,\r\n              message: 'No result found',\r\n            });\r\n          }\r\n\r\n          return res.status(200).send({\r\n            statusCode: 200,\r\n            message: 'Successful Centers!',\r\n            page: (pageValue) ? parseInt(pageValue, 10) : parseInt(pageValue + 1, 10),\r\n            totalCount: center.count,\r\n            pageCount: Math.ceil(center.count / limitValue),\r\n            pageSize: parseInt(center.rows.length, 10),\r\n            centers: center.rows,\r\n          });\r\n        })\r\n        .catch(err => res.status(500).send({\r\n          statusCode: 500,\r\n          message: 'Internal server Error!',\r\n          error: err\r\n        }));\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Delete Center record\r\n     *\r\n     * @API DELETE request '/api/v1/centers/:id'\r\n     *\r\n     * @param {object} req - HTTP Request\r\n     * @param {object} res - HTTP Response\r\n     * @returns {object} Class instance\r\n     * @memberof Center\r\n     */\r\n  deleteCenter(req, res) {\r\n    const centerId = parseInt(req.params.id, 10);\r\n    if (isNaN(centerId)) {\r\n      return res.status(400).send({\r\n        statusCode: 400,\r\n        message: 'Center id is not a number'\r\n      });\r\n    }\r\n    Center.findById(centerId)\r\n      .then((deletedCenter) => {\r\n        if (!deletedCenter) {\r\n          return res.status(400).send({\r\n            statusCode: 400,\r\n            message: `Center not found with id : ${centerId}`\r\n          });\r\n        }\r\n        Center\r\n          .destroy({\r\n            where: {\r\n              id: centerId,\r\n            }\r\n          })\r\n          .then(() => res.status(200).send({\r\n            statusCode: 200,\r\n            message: 'This Center has been deleted'\r\n          }));\r\n      })\r\n      .catch(() => res.status(500).send({\r\n        statusCode: 500,\r\n        message: 'Error deleting Center'\r\n      }));\r\n  }\r\n}\r\n\r\nexport default Centers;\r\n"]}