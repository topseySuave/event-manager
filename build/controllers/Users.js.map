{"version":3,"sources":["../../server/controllers/Users.js"],"names":["userModel","User","Events","Op","sequelize","config","Users","req","res","salt","genSaltSync","Math","floor","random","body","firstName","lastName","email","password","role","encryptedPassword","hashSync","findOne","where","iLike","then","foundUser","status","json","statusCode","message","create","send","user","compareSync","token","sign","id","process","env","SECRET_KEY","expiresIn","currentUser","update","updatedUser","subject","htmlOutput","redirect","catch","error","findAll","users","userId","destroy","deletedUser","errorMessage"],"mappings":"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","file":"Users.js","sourcesContent":["import dotenv from 'dotenv';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport models from '../models';\nimport mailer from '../middleware/mailer';\n\nconst userModel = models.User;\nconst { Events } = models;\nconst { Op } = models.sequelize;\ndotenv.config();\n\n/**\n * @export\n * @class Events\n */\nexport default class Users {\n  /**\n   * Signup Users record\n   *\n   * @param {object} req - HTTP Request\n   * @param {object} res - HTTP Response\n   * @returns {object} Class instance\n   * @memberof Users\n   */\n  createUser(req, res) {\n    /**\n     * Encrypt Password** */\n    const salt = bcrypt.genSaltSync(Math.floor(Math.random() * 5));\n\n    const {\n      firstName, lastName, email, password\n    } = req.body;\n    const role = req.body.role || false;\n    const encryptedPassword = bcrypt.hashSync(password, salt);\n\n    userModel.findOne({\n      where: {\n        email: {\n          [Op.iLike]: email\n        }\n      }\n    })\n      .then((foundUser) => {\n        if (foundUser) {\n          return res.status(401).json({\n            statusCode: 401,\n            message: 'Email has been taken, Please Choose another'\n          });\n        }\n        return userModel.create({\n          firstName,\n          lastName,\n          email,\n          password: encryptedPassword,\n          role\n        })\n          .then(user => res.status(201)\n            .send({\n              statusCode: 201,\n              message: `Account Created for ${user.firstName} ${user.lastName}`\n            }));\n      });\n  }\n\n  /**\n   * Signin Users record\n   *\n   * @param {object} req - HTTP Request\n   * @param {object} res - HTTP Response\n   * @returns {object} Class instance\n   * @memberof Users\n   */\n  loginUser(req, res) {\n    const { email, password } = req.body;\n    userModel.findOne({\n      where: {\n        email: {\n          [Op.iLike]: email\n        }\n      }\n    })\n      .then((foundUser) => {\n        if (!foundUser) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: 'Users Not Found! Please Sign Up'\n          });\n        } else if (bcrypt.compareSync(password, foundUser.password)) {\n          return res.status(200).send({\n            statusCode: 200,\n            message: 'signin successful',\n            token: jwt.sign({\n              id: foundUser.id,\n              role: foundUser.role\n            }, process.env.SECRET_KEY, { expiresIn: '24h' })\n          });\n        }\n        return res.status(401).send({\n          statusCode: 401,\n          message: 'Wrong password',\n        });\n      });\n  }\n\n  /**\n   * GETS Current Users record\n   *\n   * @param {object} req - HTTP Request\n   * @param {object} res - HTTP Response\n   * @returns {object} Class instance\n   * @memberof Users\n   */\n  currUser(req, res) {\n    return res.send({\n      id: req.currentUser.id,\n      email: req.currentUser.email\n    });\n  }\n\n  /**\n   * Assign a Users as admin\n   *\n   * @param {object} req - HTTP Request\n   * @param {object} res - HTTP Response\n   * @returns {object} Class instance\n   * @memberof Users\n   */\n  assignAdmin(req, res) {\n    const { email, password } = req.body;\n    userModel.findOne({\n      where: {\n        email: {\n          [Op.iLike]: email\n        }\n      }\n    })\n      .then((foundUser) => {\n        if (!foundUser) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: 'Users Not Found! Please Sign Up'\n          });\n        } else if (bcrypt.compareSync(password, foundUser.password)) {\n          // update user role to true...\n          userModel.update({ role: true }, {\n            where: {\n              id: foundUser.id\n            }\n          })\n            .then((updatedUser) => {\n              const subject = 'Boots Events Manager: Administrator Assignment';\n              let htmlOutput = `\n                            <h6>Boots Events Manager: Administrator Assignment</h6>\n                            <p>Dear, ${foundUser.firstName} ${foundUser.lastName} you have been Assigned as Administrator</p>\n                            <br />\n                            <ul>\n                                <li>First Name: ${foundUser.firstName}</li>\n                                <li>Last Name: ${foundUser.lastName}</li>\n                                <li>Email: ${foundUser.email}</li>\n                            </ul>\n                            <br />\n                            <h6>Admin Privileges</h6>\n                            <ul>\n                                <li>Centers: creation, updating, deleting</li>\n                            </ul>\n                        `;\n              mailer(foundUser.email, subject, subject, htmlOutput);\n              return res.redirect('/');\n            });\n        } else {\n          return res.status(401).send({\n            statusCode: 401,\n            message: 'Wrong password'\n          });\n        }\n      })\n      .catch(error => res.status(500).send(error));\n  }\n\n  /**\n   * GETS all Users record\n   *\n   * @param {object} req - HTTP Request\n   * @param {object} res - HTTP Response\n   * @returns {object} Class instance\n   * @memberof Users\n   */\n  allUsers(req, res) {\n    userModel.findAll()\n      .then(users => res.status(200).send({\n        message: 'all users found',\n        statusCode: 200,\n        users\n      }))\n      .catch(error => res.status(500).send(error));\n  }\n\n  /**\n   * DELETE a Users record\n   *\n   * @param {object} req - HTTP Request\n   * @param {object} res - HTTP Response\n   * @returns {object} Class instance\n   * @memberof Users\n   */\n  removeUsers(req, res) {\n    const { userId } = req.body;\n    userModel.findOne({\n      where: {\n        id: userId\n      }\n    })\n      .then((foundUser) => {\n        if (foundUser) {\n          userModel.destroy({\n            where: {\n              id: foundUser.id\n            }\n          })\n            .then((deletedUser) => {\n              if (deletedUser) {\n                res.status(200).send({\n                  message: 'Users has been deleted successfully',\n                  user: foundUser\n                });\n              } else {\n                res.send({\n                  message: 'Users was not deleted, please try again'\n                });\n              }\n            })\n            .catch(error => res.status(500).send({\n              message: 'Houston we have a problem.!! Error deleting Users',\n              errorMessage: error\n            }));\n        } else {\n          res.status(404).send({\n            message: 'Users was not found',\n          });\n        }\n      });\n  }\n}\n"]}