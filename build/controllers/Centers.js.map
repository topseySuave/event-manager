{"version":3,"sources":["../../server/controllers/Centers.js"],"names":["Op","sequelize","centersModel","Centers","Event","Events","attributes","eventAttributes","sortSearchRequest","search","searchBy","reqSearch","map","value","location","iLike","parseInt","price","gte","capacity","title","req","res","findOne","where","body","then","existingCenter","status","json","message","statusCode","create","img_url","description","facilities","addedCenter","send","center","order","query","limitValue","limit","process","env","DATA_LIMIT","centerId","params","id","isNaN","findById","foundCenter","update","updatedCenter","findAndCountAll","startDate","Date","toDateString","event","events","rows","catch","err","errorMessage","pageValue","next","split","findAll","or","offset","searchResults","length","centers","page","totalCount","pageCount","Math","ceil","pageSize","count","deletedCenter","destroy","error"],"mappings":"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","file":"Centers.js","sourcesContent":["import models from '../models';\n\nconst { Op } = models.sequelize;\nconst centersModel = models.Centers;\nconst Event = models.Events;\nconst attributes = ['id', 'title', 'img_url', 'location', 'description', 'facilities', 'capacity', 'price'];\nconst eventAttributes = ['id', 'title', 'img_url', 'description', 'startDate', 'endDate', 'centerId'];\n\nconst sortSearchRequest = (search, searchBy) => {\n  let reqSearch;\n  // Search with location, title, price, capacity\n  if (searchBy === 'location') {\n    reqSearch = search.map((value) => {\n      if (value !== '') {\n        return {\n          location: {\n            [Op.iLike]: `%${value}%`\n          }\n        };\n      }\n    });\n  } else if (searchBy === 'price') {\n    reqSearch = search.map((value) => {\n      if (value !== '') {\n        value = parseInt(value, 10);\n        return {\n          price: {\n            [Op.gte]: `${value}`\n          }\n        };\n      }\n    });\n  } else if (searchBy === 'capacity') {\n    reqSearch = search.map((value) => {\n      if (value !== '') {\n        value = parseInt(value, 10);\n        return {\n          capacity: {\n            [Op.gte]: `${value}`\n          }\n        };\n      }\n    });\n  } else {\n    reqSearch = search.map((value) => {\n      if (value !== '') {\n        return {\n          title: {\n            [Op.iLike]: `%${value}%`\n          }\n        };\n      }\n    });\n  }\n  return reqSearch;\n};\n\n/**\n * @export\n * @class Centers\n */\nexport class Centers {\n  /**\n     * Add Centers record\n     *\n     * @API POST request '/api/v1/centers'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Centers\n     */\n  createCenter(req, res) {\n    // check if center name already exist\n    return centersModel.findOne({\n      where: {\n        title: req.body.title,\n        location: req.body.location\n      }\n    })\n      .then((existingCenter) => {\n        // return this if center name is taken\n        if (existingCenter) {\n          return res.status(400).json({\n            message: 'Centers already exist',\n            statusCode: 400\n          });\n        }\n\n        return centersModel.create({\n          title: req.body.title,\n          img_url: req.body.img_url,\n          location: req.body.location,\n          description: req.body.description,\n          facilities: req.body.facilities,\n          capacity: parseInt(req.body.capacity, 10),\n          price: parseInt(req.body.price, 10)\n        })\n          .then((addedCenter) => {\n            if (addedCenter) {\n              res.status(201).send({\n                statusCode: 201,\n                message: 'Centers has been created',\n                center: addedCenter\n              });\n            }\n          });\n      });\n  }\n\n  /**\n     * Update Or Modify Centers record\n     *\n     * @API POST request '/api/v1/centers/:id'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Centers\n     */\n  updateCenter(req, res) {\n    const order = req.query.order || 'desc';\n    const limitValue = req.query.limit || process.env.DATA_LIMIT;\n    const centerId = parseInt(req.params.id, 10);\n    if (isNaN(centerId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Centers id is not a number'\n      });\n    }\n\n    centersModel.findById(centerId)\n      .then((foundCenter) => {\n        if (!foundCenter) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: `Center with the id of ${centerId} was not Found`\n          });\n        }\n\n        centersModel.update(\n          {\n            title: req.body.title || foundCenter.title,\n            img_url: req.body.img_url || foundCenter.img_url,\n            location: req.body.location || foundCenter.location,\n            description: req.body.description || foundCenter.description,\n            facilities: req.body.facilities || foundCenter.facilities,\n            capacity: parseInt(req.body.capacity, 10) || foundCenter.capacity,\n            price: parseInt(req.body.price, 10) || foundCenter.price,\n          },\n          {\n            where: {\n              id: centerId\n            }\n          }\n        )\n          .then((updatedCenter) => {\n            if (updatedCenter) {\n              Event.findAndCountAll({\n                where: {\n                  centerId,\n                  startDate: {\n                    [Op.gte]: new Date().toDateString()\n                  }\n                },\n                order: [\n                  ['id', order]\n                ],\n                limit: limitValue\n              })\n                .then((event) => {\n                  foundCenter.events = event.rows;\n                  return res.status(200).send({\n                    statusCode: 200,\n                    message: 'Centers has been updated',\n                    center: foundCenter,\n                    events: event.rows,\n                  });\n                })\n                .catch((err) => {\n                  if (err) {\n                    return res.status(400).send({\n                      statusCode: 400,\n                      message: 'Error getting events'\n                    });\n                  }\n                });\n            }\n          })\n          .catch(err => res.status(400).send({\n            message: 'Error Updating center',\n            errorMessage: err\n          }));\n      });\n  }\n\n  /**\n     * Get Centers by id\n     *\n     * @API GET request '/api/v1/centers/:id'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Centers\n     */\n  getCenter(req, res) {\n    const order = req.query.order || 'desc';\n    const limitValue = req.query.limit || process.env.DATA_LIMIT;\n    const centerId = parseInt(req.params.id, 10);\n    if (isNaN(centerId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Centers id is not a number'\n      });\n    }\n\n    centersModel.findOne({\n      where: {\n        id: centerId\n      },\n      attributes\n    })\n      .then((foundCenter) => {\n        if (!foundCenter) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: `Center with id: ${centerId} does not exist`,\n          });\n        }\n\n        return Event.findAndCountAll({\n          where: {\n            centerId,\n            startDate: {\n              [Op.gte]: new Date().toDateString()\n            }\n          },\n          attributes: eventAttributes,\n          order: [\n            ['id', order]\n          ],\n          limit: limitValue\n        })\n          .then((event) => {\n            foundCenter['events'] = event.rows;\n            return res.status(200).send({\n              statusCode: 200,\n              message: `Center with id: ${centerId} was found`,\n              center: foundCenter,\n              events: event.rows,\n            });\n          });\n      });\n  }\n\n  /**\n     * Get Centers record\n     *\n     * @API GET request '/api/v1/centers[?search=<search-query>&limit=<limit>&order=<desc || asc>]'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Centers\n     */\n  getCenters(req, res) {\n    const limitValue = parseInt(req.query.limit, 10) || process.env.DATA_LIMIT;\n    const pageValue = req.query.next || 0;\n    const order = req.query.order || 'desc';\n    if (req.query.search || req.query.limit) {\n      let searchBy, reqSearch;\n      if (req.query.searchBy) {\n          searchBy = req.query.searchBy;\n      }\n      const search = req.query.search.split(' ');\n\n      reqSearch = sortSearchRequest(search, searchBy);\n      centersModel.findAll({\n        where: {\n          [Op.or]: reqSearch\n        },\n        order: [\n          ['id', order]\n        ],\n        attributes,\n        limit: limitValue,\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\n      })\n        .then((searchResults) => {\n          if (searchResults.length <= 0) {\n            return res.status(404).send({\n              statusCode: 404,\n              message: 'Centers(s) do not match your search result'\n            });\n          }\n\n          return res.status(200).send({\n            statusCode: 200,\n            message: 'Successful Centers!',\n            centers: searchResults,\n            page: (pageValue) ? parseInt(pageValue, 10) : parseInt(pageValue + 1, 10),\n            totalCount: searchResults.length,\n            pageCount: Math.ceil(searchResults.length / limitValue),\n            pageSize: parseInt(searchResults.length, 10),\n          });\n        });\n    } else {\n      centersModel.findAndCountAll({\n        order: [\n          ['id', order]\n        ],\n        attributes,\n        limit: limitValue,\n        offset: (pageValue > 1) ? (pageValue * limitValue) - limitValue : pageValue\n      })\n        .then(center => res.status(200).send({\n          statusCode: 200,\n          message: 'Successful Centers!',\n          centers: center.rows,\n          page: (pageValue) ? parseInt(pageValue, 10) : parseInt(pageValue + 1, 10),\n          totalCount: center.count,\n          pageCount: Math.ceil(center.count / limitValue),\n          pageSize: parseInt(center.rows.length, 10),\n        }));\n    }\n  }\n\n  /**\n     * Delete Centers record\n     *\n     * @API DELETE request '/api/v1/centers/:id'\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @returns {object} Class instance\n     * @memberof Centers\n     */\n  deleteCenter(req, res) {\n    const centerId = parseInt(req.params.id, 10);\n    if (isNaN(centerId)) {\n      return res.status(400).send({\n        statusCode: 400,\n        message: 'Centers id is not a number'\n      });\n    }\n\n    centersModel.findById(centerId)\n      .then((deletedCenter) => {\n        if (!deletedCenter) {\n          return res.status(404).send({\n            statusCode: 404,\n            message: `Center not found with id : ${centerId}`\n          });\n        }\n\n        centersModel\n          .destroy({\n            where: {\n              id: centerId,\n            }\n          })\n          .then(() => res.status(200).send({\n            statusCode: 200,\n            message: 'This Centers has been deleted',\n            center: deletedCenter\n          }));\n      })\n      .catch((err) => {\n        res.status(400).send({\n          statusCode: 400,\n          message: 'Centers not found',\n          error: err\n        });\n      });\n  }\n}\n\nexport default Centers;\n"]}