{"version":3,"sources":["../../server/middleware/authenticate.js"],"names":["config","User","authenticate","req","res","next","token","body","query","headers","send","success","message","verify","process","env","SECRET_KEY","err","decoded","findById","id","then","user","error","currentUser"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,iBAAOA,MAAP;AACA,IAAMC,OAAO,iBAAMA,IAAnB;;AAEA,IAAMC,eAAe,SAAfA,YAAe,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAErC;;;AAGA,QAAMC,QAAQH,IAAII,IAAJ,CAASD,KAAT,IAAkBH,IAAIK,KAAJ,CAAUF,KAA5B,IAAqCH,IAAIM,OAAJ,CAAY,gBAAZ,CAArC,IAAsEN,IAAIM,OAAJ,CAAY,eAAZ,CAApF;;AAEA,QAAI,CAACH,KAAL,EAAY;AACR,eAAOF,IAAIM,IAAJ,CAAS;AACZC,qBAAS,KADG;AAEZC,qBAAS;AAFG,SAAT,CAAP;AAIH;;AAED;;AAEA,WAAO,uBAAIC,MAAJ,CAAWP,KAAX,EAAkBQ,QAAQC,GAAR,CAAYC,UAA9B,EAA0C,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/D,YAAID,GAAJ,EAAS;AACL,mBAAOb,IAAIM,IAAJ,CAAS;AACRC,yBAAS,KADD;AAERC,yBAAS;AAFD,aAAT,CAAP;AAIH;AACDX,aAAKkB,QAAL,CAAcD,QAAQE,EAAtB,EAA0BC,IAA1B,CAA+B,gBAAQ;AACnC,gBAAG,CAACC,IAAJ,EAAU;AACN,uBAAOlB,IAAIM,IAAJ,CAAS;AACZa,2BAAO;AADK,iBAAT,CAAP;AAGH;AACDpB,gBAAIqB,WAAJ,GAAkBF,IAAlB;AACAjB;AACH,SARD;AASH,KAhBM,CAAP;AAiBH,CAjCD;;kBAmCeH,Y","file":"authenticate.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport dotenv from 'dotenv';\r\nimport model from '../models';\r\n\r\ndotenv.config();\r\nconst User = model.User;\r\n\r\nconst authenticate = (req, res, next) => {\r\n\r\n    /***\r\n     * Check if token is provided in request body or query param or request Headers\r\n     ***/\r\n    const token = req.body.token || req.query.token || req.headers['x-access-token'] || req.headers['authorization'];\r\n\r\n    if (!token) {\r\n        return res.send({\r\n            success: false,\r\n            message: 'Unauthorized user, You need to sign in.'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * verify secret and checks expiry time**/\r\n    return jwt.verify(token, process.env.SECRET_KEY, (err, decoded) => {\r\n        if (err) {\r\n            return res.send({\r\n                    success: false,\r\n                    message: 'Failed to authenticate token'\r\n                });\r\n        }\r\n        User.findById(decoded.id).then(user => {\r\n            if(!user) {\r\n                return res.send({\r\n                    error: 'User Not Found..!!!'\r\n                });\r\n            }\r\n            req.currentUser = user;\r\n            next();\r\n        });\r\n    });\r\n};\r\n\r\nexport default authenticate;\r\n"]}