{"version":3,"sources":["../../server/middleware/authenticate.js"],"names":["config","User","authenticate","req","res","next","token","body","query","headers","authorization","status","send","success","statusCode","message","verify","process","env","SECRET_KEY","err","decoded","findById","id","then","user","error","currentUser"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,iBAAOA,MAAP;IACQC,I,oBAAAA,I;;;AAER,IAAMC,eAAe,SAAfA,YAAe,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC;;;AAGA,MAAMC,QAAQH,IAAII,IAAJ,CAASD,KAAT,IAAkBH,IAAIK,KAAJ,CAAUF,KAA5B,IAAqCH,IAAIM,OAAJ,CAAY,gBAAZ,CAArC,IAAsEN,IAAIM,OAAJ,CAAYC,aAAhG;;AAEA,MAAI,CAACJ,KAAL,EAAY;AACV,WAAOF,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,eAAS,KADiB;AAE1BC,kBAAY,GAFc;AAG1BC,eAAS;AAHiB,KAArB,CAAP;AAKD;;AAED;;AAEA,SAAO,uBAAIC,MAAJ,CAAWV,KAAX,EAAkBW,QAAQC,GAAR,CAAYC,UAA9B,EAA0C,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACjE,QAAID,GAAJ,EAAS;AACP,aAAOhB,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS,KADiB;AAE1BC,oBAAY,GAFc;AAG1BC,iBAAS;AAHiB,OAArB,CAAP;AAKD;AACDd,SAAKqB,QAAL,CAAcD,QAAQE,EAAtB,EAA0BC,IAA1B,CAA+B,UAACC,IAAD,EAAU;AACvC,UAAI,CAACA,IAAL,EAAW;AACT,eAAOrB,IAAIQ,IAAJ,CAAS;AACdc,iBAAO;AADO,SAAT,CAAP;AAGD;AACDvB,UAAIwB,WAAJ,GAAkBF,IAAlB;AACApB;AACD,KARD;AASD,GAjBM,CAAP;AAkBD,CAlCD;;kBAoCeH,Y","file":"authenticate.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\nimport model from '../models';\n\ndotenv.config();\nconst { User } = model;\n\nconst authenticate = (req, res, next) => {\n  /* * *\n     * Check if token is provided in request body or query param or request Headers\n     ** */\n  const token = req.body.token || req.query.token || req.headers['x-access-token'] || req.headers.authorization;\n\n  if (!token) {\n    return res.status(401).send({\n      success: false,\n      statusCode: 401,\n      message: 'Unauthorized user, You need to sign in'\n    });\n  }\n\n  /**\n     * verify secret and checks expiry time* */\n  return jwt.verify(token, process.env.SECRET_KEY, (err, decoded) => {\n    if (err) {\n      return res.status(401).send({\n        success: false,\n        statusCode: 401,\n        message: 'Failed to authenticate token, please sign in'\n      });\n    }\n    User.findById(decoded.id).then((user) => {\n      if (!user) {\n        return res.send({\n          error: 'User Not Found..!!!'\n        });\n      }\n      req.currentUser = user;\n      next();\n    });\n  });\n};\n\nexport default authenticate;\n"]}