{"version":3,"sources":["../../server/middleware/validator.js"],"names":["Validation","req","res","next","centerRules","title","location","description","facilities","capacity","price","validate","body","passes","status","send","message","statusCode","error","errors","eventRules","startDate","endDate","userId","validateLogin","email","password","first","validation","firstName","lastName"],"mappings":"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","file":"validator.js","sourcesContent":["import Validator from 'validatorjs';\n\n/**\n * @export\n * @class Validation\n */\nexport class Validation {\n  /**\n     * Validate Center record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @param {function} next\n     * @returns {object} Class instance\n     * @memberof Validation\n     */\n  validateCenter(req, res, next) {\n    const centerRules = {\n      title: 'required|string',\n      location: 'required|string',\n      description: 'required|string',\n      facilities: 'array',\n      capacity: 'required|integer',\n      price: 'required|integer'\n    };\n\n    let validate = new Validator(req.body, centerRules);\n    if (validate.passes()) return next();\n\n    return res.status(400).send({\n      message: 'a required field is missing',\n      statusCode: 400,\n      error: validate.errors\n    });\n  }\n\n  /**\n     * Validate Event record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @param {function} next\n     * @returns {object} Class instance\n     * @memberof Validation\n     */\n  validateEvent(req, res, next) {\n    const eventRules = {\n      title: 'required|string',\n      description: 'required|string',\n      startDate: 'required|date',\n      endDate: 'required|date',\n      userId: 'required|integer'\n    };\n\n    let validate = new Validator(req.body, eventRules);\n    if (validate.passes()) return next();\n\n    return res.status(400).send({\n      message: 'a required field is missing',\n      statusCode: 400,\n      error: validate.errors\n    });\n  }\n\n\n  /**\n     * Validate Login record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @param {function} next\n     * @returns {object} Class instance\n     * @memberof Validation\n     */\n  validateLogin(req, res, next) {\n    let validateLogin = {\n      email: 'required|email',\n      password: 'required|string'\n    };\n\n    let validate = new Validator(req.body, validateLogin);\n    if (validate.passes()) return next();\n\n    let error, email = validate.errors.first('email'),\n      password = validate.errors.first('password');\n\n    if(email && password){\n      error = 'The email and password fields are required';\n    } else if (email) {\n      error = validate.errors.first('email');\n    } else {\n      error = validate.errors.first('password');\n    }\n\n    return res.status(400).send({\n      message: 'a required field is missing',\n      statusCode: 400,\n      error\n    });\n  }\n\n  /**\n     * Validate Sign up record\n     *\n     * @param {object} req - HTTP Request\n     * @param {object} res - HTTP Response\n     * @param {function} next\n     * @returns {object} Class instance\n     * @memberof Validation\n     */\n  validateSignUp(req, res, next) {\n    let validation = {\n      firstName: 'required|string',\n      lastName: 'required|string',\n      email: 'required|email',\n      password: 'required|string'\n    };\n\n    let validate = new Validator(req.body, validation);\n    if (validate.passes()) return next();\n\n    let error, firstName = validate.errors.first('firstName'),\n      lastName = validate.errors.first('lastName'),\n      email = validate.errors.first('email'),\n      password = validate.errors.first('password');\n\n    error = (email && password && firstName && lastName) && 'All fields are required';\n    error.firstName = (firstName) && validate.errors.first('firstName');\n    error.lastName = (lastName) && validate.errors.first('lastName');\n    error.email = (email) && validate.errors.first('email');\n    error.password = (password) && validate.errors.first('password');\n\n    return res.status(400).send({\n      message: 'a required field is missing',\n      statusCode: 400,\n      error\n    });\n  }\n}\n\nexport default Validation;\n"]}