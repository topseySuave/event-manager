{"version":3,"sources":["../../server/test/a_users.test.js"],"names":["should","request","expect","testHelpers","describe","adminId","userId","adminToken","firstName","name","lastName","it","done","post","usersApiRoute","send","email","demoUserEmail","password","demoUserPassword","end","err","res","status","to","equal","body","be","an","haveOwnProperty","constMailAddr","constPass","user","id","adminEmailAddr","role","token","get"],"mappings":"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","file":"a_users.test.js","sourcesContent":["import chai from 'chai';\nimport dotenv from 'dotenv';\nimport supertest from 'supertest';\nimport faker from 'faker';\nimport app from '../app';\nimport testHelper from './testHelpers';\n\nchai.should();\nconst request = supertest(app);\nconst { expect } = chai;\nconst testHelpers = new testHelper();\n\ndescribe('Test user API', () => {\n  let adminId;\n  let userId;\n  let adminToken;\n\n  describe('Creating a new admin or user', () => {\n    let firstName = faker.name.firstName();\n    let lastName = faker.name.lastName();\n\n    it('should return a status 400 error response for a empty firstName field', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          firstName: '',\n          lastName,\n          email: testHelpers.demoUserEmail,\n          password: testHelpers.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response for a empty firstName field is only spaces', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          firstName: '            ',\n          lastName,\n          email: testHelpers.demoUserEmail,\n          password: testHelpers.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response for a empty lastName field', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          firstName,\n          lastName: '',\n          email: testHelpers.demoUserEmail,\n          password: testHelpers.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n    it('should return a status 400 error response for a empty lastName field is only spaces', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          firstName,\n          lastName: '             ',\n          email: testHelpers.demoUserEmail,\n          password: testHelpers.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response for a empty email field', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: '',\n          password: testHelpers.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response for a empty email field is only spaces', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: '            ',\n          password: testHelpers.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response if email is not correct', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: 'testHelpers.demoUserEmail',\n          password: testHelpers.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response if password is empty', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: testHelpers.demoUserEmail,\n          password: ''\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response if password field is only spaces', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: testHelpers.demoUserEmail,\n          password: '          '\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should create a user ', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: testHelpers.constMailAddr,\n          password: testHelpers.constPass\n        })\n        .end((err, res) => {\n          userId = res.body.user.id;\n          expect(res.status).to.equal(201);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal(`Account Created for ${firstName} ${lastName}`);\n          done();\n        });\n    });\n\n    it('should create an admin', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: testHelpers.adminEmailAddr,\n          password: testHelpers.constPass,\n          role: true\n        })\n        .end((err, res) => {\n          adminId = res.body.user.id;\n          expect(res.status).to.equal(201);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal(`Account Created for ${firstName} ${lastName}`);\n          done();\n        });\n    });\n\n    it('should return 401 error response for existing email', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: testHelpers.constMailAddr,\n          password: testHelpers.constPass\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(401);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Email has been taken, Please Choose another');\n          done();\n        });\n    });\n  });\n\n  describe('Test to sign a user and/or admin in/out', () => {\n    it('should return a status 400 error response if email is empty', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          email: '',\n          password: testHelpers.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response if email field is only spaces', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          email: '          ',\n          password: testHelpers.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response if password is empty', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          email: testHelpers.constMailAddr,\n          password: ''\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response if password field is only spaces', (done) => {\n      request.post(testHelpers.usersApiRoute)\n        .send({\n          email: testHelpers.constMailAddr,\n          password: '         '\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 200 success response for logging in a user', (done) => {\n      request.post(`${testHelpers.usersApiRoute}/authentication`)\n        .send({\n          email: testHelpers.constMailAddr,\n          password: testHelpers.constPass,\n        })\n        .end((err, res) => {\n          expect(res.body).to.be.an('object');\n          expect(res.status).to.equal(200);\n          expect(res.body).to.haveOwnProperty('token');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Here`s your Token');\n        });\n      done();\n    });\n\n    it('should return a status 200 success response for logging in an admin user', (done) => {\n      request.post(`${testHelpers.usersApiRoute}/authentication`)\n        .send({\n          email: testHelpers.adminEmailAddr,\n          password: testHelpers.constPass,\n        })\n        .end((err, res) => {\n          adminToken = res.body.token;\n          expect(res.body).to.be.an('object');\n          expect(res.status).to.equal(200);\n          expect(res.body).to.haveOwnProperty('token');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Here`s your Token');\n        });\n      done();\n    });\n  });\n\n  describe('Test to set a user as admin', () => {\n    it('should return 404 for \"user not found\"', (done) => {\n      request.post('/admin/assign')\n        .send({\n          email: 'person',\n          password: testHelpers.constPass\n        })\n        .end((err, res) => {\n          expect(res.body).to.be.an('object');\n          expect(res.status).to.equal(404);\n          expect(res.body).to.haveOwnProperty('error').to.equal(true);\n          expect(res.body).to.haveOwnProperty('message').to.equal('User Not Found! Please Sign Up');\n          done();\n        });\n    });\n\n    it('should return 200 for all users', (done) => {\n      request.get('/admin/users/all')\n        .end((err, res) => {\n          expect(res.body).to.be.an('object');\n          expect(res.status).to.equal(200);\n          expect(res.body).to.haveOwnProperty('message').to.equal('all users found');\n          expect(res.body).to.haveOwnProperty('users').to.be.an('array');\n          done();\n        });\n    });\n  });\n\n  describe('Tests for deleting users from the database', () => {\n    it('should return 404 for trying to delete a user but user not found', (done) => {\n      request.post('/admin/users')\n        .send({\n          userId: 100\n        })\n        .end((err, res) => {\n          expect(res.body).to.be.an('object');\n          expect(res.status).to.equal(404);\n          expect(res.body).to.haveOwnProperty('message').to.equal('User was not found');\n          expect(res.body).to.haveOwnProperty('error').to.equal(true);\n          done();\n        });\n    });\n\n    it('should return 200 for succesfully deleting an admin user', (done) => {\n      request.post('/admin/users')\n        .send({\n          userId: adminId\n        })\n        .end((err, res) => {\n          expect(res.body).to.be.an('object');\n          expect(res.status).to.equal(200);\n          expect(res.body).to.haveOwnProperty('message').to.equal('User has been deleted successfully');\n          expect(res.body).to.haveOwnProperty('error').to.equal(false);\n          done();\n        });\n    });\n  });\n});\n"]}