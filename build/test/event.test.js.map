{"version":3,"sources":["../../server/test/event.test.js"],"names":["request","expect","testConstants","userId","centerId","eventId","tokenn","describe","decodedToken","token","process","env","TOKEN","id","get","centersApiRoute","end","err","res","body","centers","it","eventsApiRoute","to","be","an","status","equal","done","post","send","title","demoEventTitle","img_url","demoEventImg","location","demoEventLocation","description","demoEventDescrp","startDate","demoEventStartDate","endDate","demoEventEndDate","haveOwnProperty","set","error","demoEventPastedDate","deep","have","ownProperty","put","delete","console","log"],"mappings":"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","file":"event.test.js","sourcesContent":["/* global describe, it */\n\nimport chai from \"chai\";\nimport jwtDecode from \"jwt-decode\";\nimport supertest from \"supertest\";\nimport app from \"../app\";\nimport testInit from \"./testInit\";\nimport { before, beforeEach, after } from \"mocha\";\n\nconst request = supertest(app);\nconst { expect } = chai;\nconst testConstants = new testInit();\nlet userId = 1;\nlet centerId = 1;\nlet eventId;\nlet tokenn;\n\ndescribe(\"/api/v1/events Route Test API Endpoints\", () => {\n  let decodedToken;\n  let token;\n  let centerId;\n\n  // create a user so as to obtain a token for authentication\n  beforeEach(() => {\n    userId = jwtDecode(process.env.TOKEN).id;\n    request.get(testConstants.centersApiRoute).end((err, res) => {\n      centerId = res.body.centers[0].id;\n    });\n  });\n\n  it(\"Should return 200 with an empty event array\", done => {\n    request.get(testConstants.eventsApiRoute).end((err, res) => {\n      expect(res.body).to.be.an(\"object\");\n      expect(res.status).to.be.equal(200);\n    });\n    done();\n  });\n\n  // Creating a new event\n  it(\"Should return 401 for unauthorized user without token\", done => {\n    request\n      .post(testConstants.eventsApiRoute)\n      .send({\n        title: testConstants.demoEventTitle,\n        img_url: testConstants.demoEventImg,\n        location: testConstants.demoEventLocation,\n        description: testConstants.demoEventDescrp,\n        startDate: testConstants.demoEventStartDate,\n        endDate: testConstants.demoEventEndDate,\n        centerId,\n        userId\n      })\n      .end((err, res) => {\n        expect(res.status).to.be.equal(401);\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.equal(\"Unauthorized user, You need to sign in\");\n      });\n    done();\n  });\n\n  it(\"Should return 400 for missing title field\", done => {\n    request\n      .post(testConstants.eventsApiRoute)\n      .set(\"x-access-token\", process.env.TOKEN)\n      .send({\n        title: \"\",\n        img_url: testConstants.demoEventImg,\n        location: testConstants.demoEventLocation,\n        description: testConstants.demoEventDescrp,\n        startDate: testConstants.demoEventStartDate,\n        endDate: testConstants.demoEventEndDate,\n        centerId,\n        userId\n      })\n      .end((err, res) => {\n        expect(res.status).to.be.equal(400);\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.equal(\"a required field is missing\");\n      });\n    done();\n  });\n\n  it(\"Should return 400 for missing description field\", done => {\n    request\n      .post(testConstants.eventsApiRoute)\n      .set(\"x-access-token\", process.env.TOKEN)\n      .send({\n        title: testConstants.demoEventTitle,\n        img_url: testConstants.demoEventImg,\n        location: testConstants.demoEventLocation,\n        description: \"\",\n        startDate: testConstants.demoEventStartDate,\n        endDate: testConstants.demoEventEndDate,\n        centerId,\n        userId\n      })\n      .end((err, res) => {\n        expect(res.status).to.be.equal(400);\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.equal(\"a required field is missing\");\n        expect(res.body.error)\n          .to.haveOwnProperty(\"description\")\n          .to.equal(\"The description field is required.\");\n      });\n    done();\n  });\n\n  it(\"Should return 400 for missing start date field\", done => {\n    request\n      .post(testConstants.eventsApiRoute)\n      .set(\"x-access-token\", process.env.TOKEN)\n      .send({\n        title: testConstants.demoEventTitle,\n        img_url: testConstants.demoEventImg,\n        location: testConstants.demoEventLocation,\n        description: testConstants.demoEventDescrp,\n        startDate: \"\",\n        endDate: testConstants.demoEventEndDate,\n        centerId,\n        userId\n      })\n      .end((err, res) => {\n        expect(res.status).to.be.equal(400);\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.equal(\"a required field is missing\");\n        done();\n      });\n  });\n\n  it(\"Should return 400 for missing end date field\", done => {\n    request\n      .post(testConstants.eventsApiRoute)\n      .set(\"x-access-token\", process.env.TOKEN)\n      .send({\n        title: testConstants.demoEventTitle,\n        img_url: testConstants.demoEventImg,\n        location: testConstants.demoEventLocation,\n        description: testConstants.demoEventDescrp,\n        startDate: testConstants.demoEventStartDate,\n        endDate: \"\",\n        centerId,\n        userId\n      })\n      .end((err, res) => {\n        expect(res.status).to.be.equal(400);\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.equal(\"a required field is missing\");\n        done();\n      });\n  });\n\n  it(\"Should return 400 for missing center id field\", done => {\n    request\n      .post(testConstants.eventsApiRoute)\n      .set(\"x-access-token\", process.env.TOKEN)\n      .send({\n        title: testConstants.demoEventTitle,\n        img_url: testConstants.demoEventImg,\n        location: testConstants.demoEventLocation,\n        description: testConstants.demoEventDescrp,\n        startDate: testConstants.demoEventStartDate,\n        endDate: testConstants.demoEventEndDate,\n        centerId: \"\",\n        userId\n      })\n      .end((err, res) => {\n        expect(res.status).to.be.equal(400);\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.equal(\"a required field is missing\");\n        expect(res.body.error)\n          .to.haveOwnProperty(\"centerId\")\n          .to.equal(\"The centerId field is required.\");\n      });\n    done();\n  });\n\n  it(\"Should return 400 when the center has been booked already. (when startDate is the past)\", done => {\n    request\n      .post(testConstants.eventsApiRoute)\n      .set(\"x-access-token\", process.env.TOKEN)\n      .send({\n        title: testConstants.demoEventTitle,\n        img_url: testConstants.demoEventImg,\n        location: testConstants.demoEventLocation,\n        description: testConstants.demoEventDescrp,\n        startDate: testConstants.demoEventPastedDate,\n        endDate: testConstants.demoEventEndDate,\n        centerId,\n        userId\n      })\n      .end((err, res) => {\n        expect(res.status).to.deep.equal(400);\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.equal(\"Center has been booked for this date\");\n      });\n    done();\n  });\n\n  it(\"Should return 200 for creating an event\", done => {\n    request\n      .post(testConstants.eventsApiRoute)\n      .set(\"x-access-token\", process.env.TOKEN)\n      .send({\n        title: testConstants.demoEventTitle,\n        img_url: testConstants.demoEventImg,\n        location: testConstants.demoEventLocation,\n        description: testConstants.demoEventDescrp,\n        startDate: testConstants.demoEventStartDate,\n        endDate: testConstants.demoEventEndDate,\n        centerId,\n        userId\n      })\n      .end((err, res) => {\n        expect(res.status).to.deep.equal(200);\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.equal(\"Event has been created\");\n      });\n    done();\n  });\n\n  // getting all events\n  it(\"should return 200 response with all events in the database\", done => {\n    request.get(testConstants.eventsApiRoute).end((err, res) => {\n      expect(res.status).to.deep.equal(200);\n      expect(res.body).to.be.an(\"object\");\n      expect(res.body)\n        .to.have.ownProperty(\"message\")\n        .to.be.equal(\"Successful Events!\");\n      expect(res.body)\n        .to.have.ownProperty(\"events\")\n        .to.be.an(\"object\");\n      expect(res.body)\n        .to.have.ownProperty(\"meta\")\n        .to.be.an(\"object\");\n    });\n    done();\n  });\n\n  // Updating an event\n  it(\"should return 400 for an invalid id\", done => {\n    request\n      .put(`${testConstants.eventsApiRoute}/wrongidparam`)\n      .set(\"x-access-token\", process.env.TOKEN)\n      .send({\n        title: \"A demo title to update this event\",\n        img_url: testConstants.demoEventImg,\n        location: testConstants.demoEventLocation,\n        description: testConstants.demoEventDescrp,\n        startDate: testConstants.demoEventStartDate,\n        endDate: testConstants.demoEventEndDate,\n        centerId\n      })\n      .end((err, res) => {\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.be.equal(\"the id specified is not a number\");\n      });\n    done();\n  });\n\n  it(\"should successfully update an event\", done => {\n    request\n      .put(`${testConstants.eventsApiRoute}/1`)\n      .set(\"x-access-token\", process.env.TOKEN)\n      .send({\n        title: \"A demo title to update this event\",\n        img_url: testConstants.demoEventImg,\n        location: testConstants.demoEventLocation,\n        description: testConstants.demoEventDescrp,\n        startDate: testConstants.demoEventStartDate,\n        endDate: testConstants.demoEventEndDate,\n        centerId\n      })\n      .end((err, res) => {\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.be.equal(\"Event has been updated accordingly\");\n      });\n    done();\n  });\n\n  // deleting an event\n  it(\"should succesfully delete an event\", done => {\n    request\n      .delete(`${testConstants.eventsApiRoute}/1`)\n      .set(\"x-access-token\", process.env.TOKEN)\n      .end((err, res) => {\n        console.log(\"delete event 1 ====> \", res.body);\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.be.equal(\"This Event has been deleted\");\n      });\n    done();\n  });\n\n  after(done => {\n    request\n      .post(\"/admin/users\")\n      .send({\n        userId\n      })\n      .end((err, res) => {\n        expect(res.body).to.be.an(\"object\");\n        expect(res.status).to.equal(200);\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.equal(\"User has been deleted successfully\");\n      });\n    done();\n  });\n});\n"]}