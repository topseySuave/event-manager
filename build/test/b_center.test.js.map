{"version":3,"sources":["../../server/test/b_center.test.js"],"names":["should","request","expect","testHelpers","describe","before","console","log","getToken","it","done","post","centersApiRoute","send","title","democenterTitle","img_url","demoCenterImg","location","democenterLocation","description","demoCenterDescrp","facilities","demoCenterFacilities","capacity","democenterCapacity","price","demoCenterPrice","end","err","res","status","to","equal","body","be","an","haveOwnProperty"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,eAAKA,MAAL;AACA,IAAMC,UAAU,uCAAhB;IACQC,M,kBAAAA,M;;AACR,IAAMC,cAAc,2BAApB;;AAEAC,SAAS,iBAAT,EAA4B,YAAM;AAChCA,WAAS,uBAAT,EAAkC,YAAM;AACtCC,WAAO,YAAP,EAAqB,YAAM;AACzBC,cAAQC,GAAR,CAAYJ,YAAYK,QAAZ,EAAZ;AACD,KAFD;;AAIAC,OAAG,+CAAH,EAAoD,UAACC,IAAD,EAAU;AAC5DT,cAAQU,IAAR,CAAaR,YAAYS,eAAzB,EACGC,IADH,CACQ;AACJC,eAAOX,YAAYY,eADf;AAEJC,iBAASb,YAAYc,aAFjB;AAGJC,kBAAUf,YAAYgB,kBAHlB;AAIJC,qBAAajB,YAAYkB,gBAJrB;AAKJC,oBAAYnB,YAAYoB,oBALpB;AAMJC,kBAAUrB,YAAYsB,kBANlB;AAOJC,eAAOvB,YAAYwB;AAPf,OADR,EAUGC,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB5B,eAAO4B,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA/B,eAAO4B,IAAII,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAlC,eAAO4B,IAAII,IAAX,EAAiBF,EAAjB,CAAoBK,eAApB,CAAoC,SAApC,EAA+CL,EAA/C,CAAkDC,KAAlD,CAAwD,wCAAxD;AACAvB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,sDAAH,EAA2D,UAACC,IAAD,EAAU;AACnET,cAAQU,IAAR,CAAgBR,YAAYS,eAA5B,uBACGC,IADH,CACQ;AACJC,eAAOX,YAAYY,eADf;AAEJC,iBAASb,YAAYc,aAFjB;AAGJC,kBAAUf,YAAYgB,kBAHlB;AAIJC,qBAAajB,YAAYkB,gBAJrB;AAKJC,oBAAYnB,YAAYoB,oBALpB;AAMJC,kBAAUrB,YAAYsB,kBANlB;AAOJC,eAAOvB,YAAYwB;AAPf,OADR,EAUGC,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB5B,eAAO4B,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA/B,eAAO4B,IAAII,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAlC,eAAO4B,IAAII,IAAX,EAAiBF,EAAjB,CAAoBK,eAApB,CAAoC,SAApC,EAA+CL,EAA/C,CAAkDC,KAAlD,CAAwD,8CAAxD;AACAvB;AACD,OAfH;AAgBD,KAjBD;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GA7DD;AA8DD,CA/DD","file":"b_center.test.js","sourcesContent":["import chai from 'chai';\nimport faker from 'faker';\nimport dotenv from 'dotenv';\nimport supertest from 'supertest';\nimport app from '../app';\nimport testHelper from './testHelpers';\n\nchai.should();\nconst request = supertest(app);\nconst { expect } = chai;\nconst testHelpers = new testHelper();\n\ndescribe('Test center API', () => {\n  describe('Creating a new center', () => {\n    before('show token', () => {\n      console.log(testHelpers.getToken());\n    });\n\n    it('should return 401 error response for no token', (done) => {\n      request.post(testHelpers.centersApiRoute)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(401);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Unauthorized user, You need to sign in');\n          done();\n        });\n    });\n\n    it('should return 401 error response for a invalid token', (done) => {\n      request.post(`${testHelpers.centersApiRoute}?token=undefined`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(401);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Failed to authenticate token, please sign in');\n          done();\n        });\n    });\n\n    // it('should return 201 response for a valid token', (done) => {\n    //   request.post(`${testHelpers.centersApiRoute}?token=${testHelpers.getToken()}`)\n    //     .send({\n    //       title: testHelpers.democenterTitle,\n    //       img_url: testHelpers.demoCenterImg,\n    //       location: testHelpers.democenterLocation,\n    //       description: testHelpers.demoCenterDescrp,\n    //       facilities: testHelpers.demoCenterFacilities,\n    //       capacity: testHelpers.democenterCapacity,\n    //       price: testHelpers.demoCenterPrice\n    //     })\n    //     .end((err, res) => {\n    //       expect(res.status).to.equal(201);\n    //       expect(res.body).to.be.an('object');\n    //       expect(res.body).to.haveOwnProperty('message').to.equal('Center has been created');\n    //       done();\n    //     });\n    // });\n  });\n});\n\n"]}