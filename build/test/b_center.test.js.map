{"version":3,"sources":["../../server/test/b_center.test.js"],"names":["should","request","expect","testHelpers","describe","decodedToken","token","centerId","before","post","usersApiRoute","send","email","constMailAddr","password","constPass","end","err","res","body","it","done","centersApiRoute","title","democenterTitle","img_url","demoCenterImg","location","democenterLocation","description","demoCenterDescrp","facilities","demoCenterFacilities","capacity","democenterCapacity","price","demoCenterPrice","status","to","equal","be","an","haveOwnProperty","get","rand5","Math","floor","random","centers","length","process","env","DATA_LIMIT","centerCount","centId","delete","userId","id"],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,eAAKA,MAAL,G,CARA;;AASA,IAAMC,UAAU,uCAAhB;IACQC,M,kBAAAA,M;;AACR,IAAMC,cAAc,2BAApB;;AAEAC,SAAS,iBAAT,EAA4B,YAAM;AAChC,MAAIC,qBAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,iBAAJ;;AAEAH,WAAS,uBAAT,EAAkC,YAAM;AACtCI,WAAO,YAAM;AACXP,cAAQQ,IAAR,CAAgBN,YAAYO,aAA5B,sBACGC,IADH,CACQ;AACJC,eAAOT,YAAYU,aADf;AAEJC,kBAAUX,YAAYY;AAFlB,OADR,EAKGC,GALH,CAKO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBZ,gBAAQY,IAAIC,IAAJ,CAASb,KAAjB;AACD,OAPH;AAQD,KATD;;AAWAc,OAAG,+CAAH,EAAoD,UAACC,IAAD,EAAU;AAC5DpB,cAAQQ,IAAR,CAAaN,YAAYmB,eAAzB,EACGX,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,wCAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,sDAAH,EAA2D,UAACC,IAAD,EAAU;AACnEpB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,uBACGX,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,8CAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,qDAAH,EAA0D,UAACC,IAAD,EAAU;AAClEpB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,eAAqDhB,KAArD,EACGK,IADH,CACQ;AACJY,eAAO,EADH;AAEJE,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,6BAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,wDAAH,EAA6D,UAACC,IAAD,EAAU;AACrEpB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,eAAqDhB,KAArD,EACGK,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAU,EAHN;AAIJE,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,6BAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,2DAAH,EAAgE,UAACC,IAAD,EAAU;AACxEpB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,eAAqDhB,KAArD,EACGK,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa,EAJT;AAKJE,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,6BAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,8DAAH,EAAmE,UAACC,IAAD,EAAU;AAC3EpB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,eAAqDhB,KAArD,EACGK,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY,mCALR;AAMJE,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,6BAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,uDAAH,EAA4D,UAACC,IAAD,EAAU;AACpEpB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,eAAqDhB,KAArD,EACGK,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU,EANN;AAOJE,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,6BAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,oDAAH,EAAyD,UAACC,IAAD,EAAU;AACjEpB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,eAAqDhB,KAArD,EACGK,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAO;AAPH,OADR,EAUGnB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,6BAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,gEAAH,EAAqE,UAACC,IAAD,EAAU;AAC7EpB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,eAAqDhB,KAArD,EACGK,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,yBAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,2EAAH,EAAgF,UAACC,IAAD,EAAU;AACxFpB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,eAAqDhB,KAArD,EACGK,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,sBAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,oDAAH,EAAyD,UAACC,IAAD,EAAU;AACjEpB,cAAQ0C,GAAR,MAAexC,YAAYmB,eAA3B,EACGN,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,MAApC;AACAxC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,UAApC;AACAxC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,YAApC;AACAxC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,WAApC;AACAxC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,qBAAxD;AACA,YAAIK,QAAQC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB7B,IAAIC,IAAJ,CAAS6B,OAAT,CAAiBC,MAAlC,GAA4C,CAAvD,CAAZ;AACA1C,mBAAWqC,KAAX;AACAvB;AACD,OAZH;AAaD,KAdD;;AAgBAD,OAAG,4EAAH,EAAiF,UAACC,IAAD,EAAU;AACzF6B,cAAQC,GAAR,CAAYC,UAAZ,GAAyB,EAAzB;AACAnD,cAAQ0C,GAAR,CAAexC,YAAYmB,eAA3B,0BACGN,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,2CAAxD;AACAlB;AACD,OANH;AAOD,KATD;;AAWAD,OAAG,2FAAH,EAAgG,UAACC,IAAD,EAAU;AACxGpB,cAAQ0C,GAAR,CAAexC,YAAYmB,eAA3B,mCACGN,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAImC,cAAcnC,IAAIC,IAAJ,CAAS6B,OAAT,CAAiBC,MAAnC;AACA/C,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,YAApC,EAAkDJ,EAAlD,CAAqDC,KAArD,CAA2Dc,WAA3D;AACD,OANH;AAOAhC;AACD,KATD;;AAWAD,OAAG,wFAAH,EAA6F,UAACC,IAAD,EAAU;AACrGpB,cAAQ0C,GAAR,CAAexC,YAAYmB,eAA3B,kCACGN,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAImC,cAAcnC,IAAIC,IAAJ,CAAS6B,OAAT,CAAiBC,MAAnC;AACA/C,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,YAApC,EAAkDJ,EAAlD,CAAqDC,KAArD,CAA2Dc,WAA3D;AACD,OANH;AAOAhC;AACD,KATD;;AAWAD,OAAG,2FAAH,EAAgG,UAACC,IAAD,EAAU;AACxGpB,cAAQ0C,GAAR,CAAexC,YAAYmB,eAA3B,+BACGN,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAImC,cAAcnC,IAAIC,IAAJ,CAAS6B,OAAT,CAAiBC,MAAnC;AACA/C,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,YAApC,EAAkDJ,EAAlD,CAAqDC,KAArD,CAA2Dc,WAA3D;AACD,OANH;AAOAhC;AACD,KATD;;AAWAD,OAAG,2EAAH,EAAgF,UAACC,IAAD,EAAU;AACxFpB,cAAQ0C,GAAR,CAAexC,YAAYmB,eAA3B,sBACGN,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,OAApC,EAA6CJ,EAA7C,CAAgDC,KAAhD,CAAsD,IAAtD;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,2BAAxD;AACAlB;AACD,OAPH;AAQD,KATD;;AAWAD,OAAG,oGAAH,EAAyG,UAACC,IAAD,EAAU;AACjH,UAAIiC,SAAS,GAAb;AACArD,cAAQ0C,GAAR,CAAexC,YAAYmB,eAA3B,SAA8CgC,MAA9C,EACGtC,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,OAApC,EAA6CJ,EAA7C,CAAgDC,KAAhD,CAAsD,IAAtD;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,sBAA2Ee,MAA3E;AACAjC;AACD,OAPH;AAQD,KAVD;;AAYAD,OAAG,mDAAH,EAAwD,UAACC,IAAD,EAAU;AAChEpB,cAAQ0C,GAAR,CAAexC,YAAYmB,eAA3B,SAA8Cf,QAA9C,EACGS,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,sBAA2EhC,QAA3E;AACAc;AACD,OANH;AAOD,KARD;;AAUAD,OAAG,oFAAH,EAAyF,UAACC,IAAD,EAAU;AACjGpB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,mBAAyDhB,KAAzD,EACGK,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB;AACA;AACA;AACA;AACAG;AACD,OAhBH;AAiBD,KAlBD;;AAoBAD,OAAG,sFAAH,EAA2F,UAACC,IAAD,EAAU;AACnGpB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,sBAA4DhB,KAA5D,EACGK,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,2BAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,gFAAH,EAAqF,YAAM;AACzFnB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,SAA+Cf,QAA/C,eAAiED,KAAjE,EACGK,IADH,CACQ;AACJY,eAAO,EADH;AAEJE,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,6BAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,mFAAH,EAAwF,YAAM;AAC5FnB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,SAA+Cf,QAA/C,eAAiED,KAAjE,EACGK,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAU,EAHN;AAIJE,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,6BAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,sFAAH,EAA2F,YAAM;AAC/FnB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,SAA+Cf,QAA/C,eAAiED,KAAjE,EACGK,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa,EAJT;AAKJE,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,6BAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,mFAAH,EAAwF,YAAM;AAC5FnB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,SAA+Cf,QAA/C,eAAiED,KAAjE,EACGK,IADH,CACQ;AACJY,eAAOpB,YAAYqB,eADf;AAEJC,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU,EANN;AAOJE,eAAOhC,YAAYiC;AAPf,OADR,EAUGpB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,6BAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,0DAAH,EAA+D,YAAM;AACnEnB,cAAQQ,IAAR,CAAgBN,YAAYmB,eAA5B,SAA+Cf,QAA/C,eAAiED,KAAjE,EACGK,IADH,CACQ;AACJY,eAAO,kCADH;AAEJE,iBAAStB,YAAYuB,aAFjB;AAGJC,kBAAUxB,YAAYyB,kBAHlB;AAIJC,qBAAa1B,YAAY2B,gBAJrB;AAKJC,oBAAY5B,YAAY6B,oBALpB;AAMJC,kBAAU9B,YAAY+B,kBANlB;AAOJC,eAAO;AAPH,OADR,EAUGnB,GAVH,CAUO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,6BAAxD;AACAlB;AACD,OAfH;AAgBD,KAjBD;;AAmBAD,OAAG,mFAAH,EAAwF,UAACC,IAAD,EAAU;AAChGpB,cAAQsD,MAAR,CAAkBpD,YAAYmB,eAA9B,SAAiDf,QAAjD,EACGS,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBG,EAApB,CAAuB,QAAvB;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,wCAAxD;AACD,OALH;AAMAlB;AACD,KARD;;AAUAD,OAAG,uEAAH,EAA4E,UAACC,IAAD,EAAU;AACpFpB,cAAQsD,MAAR,CAAkBpD,YAAYmB,eAA9B,YACGN,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBG,EAApB,CAAuB,QAAvB;AACAvC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,wCAAxD;AACD,OALH;AAMAlB;AACD,KARD;;AAUAD,OAAG,sDAAH,EAA2D,UAACC,IAAD,EAAU;AACnEhB,qBAAe,yBAAUC,KAAV,CAAf;AACAL,cAAQQ,IAAR,CAAa,cAAb,EACGE,IADH,CACQ;AACJ6C,gBAAQnD,aAAaoD;AADjB,OADR,EAIGzC,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBhB,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBE,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvC,eAAOgB,IAAImB,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,SAApC,EAA+CJ,EAA/C,CAAkDC,KAAlD,CAAwD,oCAAxD;AACArC,eAAOgB,IAAIC,IAAX,EAAiBmB,EAAjB,CAAoBI,eAApB,CAAoC,OAApC,EAA6CJ,EAA7C,CAAgDC,KAAhD,CAAsD,KAAtD;AACD,OATH;AAUAlB;AACD,KAbD;AAcD,GA/cD;AAgdD,CArdD","file":"b_center.test.js","sourcesContent":["/* global describe, it */\n\nimport chai from 'chai';\nimport jwtDecode from 'jwt-decode';\nimport supertest from 'supertest';\nimport app from '../app';\nimport testHelper from './testHelpers';\n\nchai.should();\nconst request = supertest(app);\nconst { expect } = chai;\nconst testHelpers = new testHelper();\n\ndescribe('Test center API', () => {\n  let decodedToken;\n  let token;\n  let centerId;\n\n  describe('Creating a new center', () => {\n    before(() => {\n      request.post(`${testHelpers.usersApiRoute}/authentication`)\n        .send({\n          email: testHelpers.constMailAddr,\n          password: testHelpers.constPass,\n        })\n        .end((err, res) => {\n          token = res.body.token;\n        });\n    });\n\n    it('should return 401 error response for no token', (done) => {\n      request.post(testHelpers.centersApiRoute)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(401);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Unauthorized user, You need to sign in');\n          done();\n        });\n    });\n\n    it('should return 401 error response for a invalid token', (done) => {\n      request.post(`${testHelpers.centersApiRoute}?token=undefined`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(401);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Failed to authenticate token, please sign in');\n          done();\n        });\n    });\n\n    it('should return 400 response for an empty title field', (done) => {\n      request.post(`${testHelpers.centersApiRoute}?token=${token}`)\n        .send({\n          title: '',\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return 400 response for an empty location field', (done) => {\n      request.post(`${testHelpers.centersApiRoute}?token=${token}`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: '',\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return 400 response for an empty description field', (done) => {\n      request.post(`${testHelpers.centersApiRoute}?token=${token}`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: '',\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return 400 response if facility field is not an array', (done) => {\n      request.post(`${testHelpers.centersApiRoute}?token=${token}`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: 'swimming pool, parking lot, stage',\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return 400 response if capacity field is empty', (done) => {\n      request.post(`${testHelpers.centersApiRoute}?token=${token}`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: '',\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return 400 response if price field is empty', (done) => {\n      request.post(`${testHelpers.centersApiRoute}?token=${token}`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: ''\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should create center and return 201 response for a valid token', (done) => {\n      request.post(`${testHelpers.centersApiRoute}?token=${token}`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(201);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Center has been created');\n          done();\n        });\n    });\n\n    it('should create center and return 400 response for \"center all ready exist\"', (done) => {\n      request.post(`${testHelpers.centersApiRoute}?token=${token}`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Center already exist');\n          done();\n        });\n    });\n\n    it('should return 200 response for getting all centers', (done) => {\n      request.get(`${testHelpers.centersApiRoute}`)\n        .end((err, res) => {\n          expect(res.status).to.equal(200);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('page');\n          expect(res.body).to.haveOwnProperty('pageSize');\n          expect(res.body).to.haveOwnProperty('totalCount');\n          expect(res.body).to.haveOwnProperty('pageCount');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Successful Centers!');\n          let rand5 = Math.floor((Math.random() * res.body.centers.length) + 1);\n          centerId = rand5;\n          done();\n        });\n    });\n\n    it('should return 404 response for getting search result for centers not found', (done) => {\n      process.env.DATA_LIMIT = 30;\n      request.get(`${testHelpers.centersApiRoute}?search=ikeja lagos`)\n        .end((err, res) => {\n          expect(res.status).to.equal(404);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Center(s) do not match your search result');\n          done();\n        });\n    });\n\n    it('should return 200 response for getting search result for centers with filters by capacity', (done) => {\n      request.get(`${testHelpers.centersApiRoute}?filter=capacity&search=2000`)\n        .end((err, res) => {\n          let centerCount = res.body.centers.length;\n          expect(res.status).to.equal(200);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('totalCount').to.equal(centerCount);\n        });\n      done();\n    });\n\n    it('should return 200 response for getting search result for centers with filters by price', (done) => {\n      request.get(`${testHelpers.centersApiRoute}?filter=price&search=200000`)\n        .end((err, res) => {\n          let centerCount = res.body.centers.length;\n          expect(res.status).to.equal(200);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('totalCount').to.equal(centerCount);\n        });\n      done();\n    });\n\n    it('should return 200 response for getting search result for centers with filters by location', (done) => {\n      request.get(`${testHelpers.centersApiRoute}?filter=location&search=`)\n        .end((err, res) => {\n          let centerCount = res.body.centers.length;\n          expect(res.status).to.equal(200);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('totalCount').to.equal(centerCount);\n        });\n      done();\n    });\n\n    it('should return 400 response for getting one center with wrond id parameter', (done) => {\n      request.get(`${testHelpers.centersApiRoute}/wrong-id-param`)\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('error').to.equal(true);\n          expect(res.body).to.haveOwnProperty('message').to.equal('Center id is not a number');\n          done();\n        });\n    });\n\n    it('should return 404 response for getting one center with \"Center with id: <centerId> does not exist\"', (done) => {\n      let centId = 200;\n      request.get(`${testHelpers.centersApiRoute}/${centId}`)\n        .end((err, res) => {\n          expect(res.status).to.equal(404);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('error').to.equal(true);\n          expect(res.body).to.haveOwnProperty('message').to.equal(`Center with id: ${centId} does not exist`);\n          done();\n        });\n    });\n\n    it('should return 200 response for getting one center', (done) => {\n      request.get(`${testHelpers.centersApiRoute}/${centerId}`)\n        .end((err, res) => {\n          expect(res.status).to.equal(200);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal(`Center with id: ${centerId} was found`);\n          done();\n        });\n    });\n\n    it('should return 404 response with \"center not found\" for trying to updating a center', (done) => {\n      request.post(`${testHelpers.centersApiRoute}/900?token=${token}`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          // console.log(res);\n          // expect(res.status).to.equal(404);\n          // expect(res.body).to.be.an('object');\n          // expect(res.body).to.haveOwnProperty('message').to.equal('Center not Found with 900');\n          done();\n        });\n    });\n\n    it('should return 400 response for a invalid id parameter when trying to update a center', (done) => {\n      request.post(`${testHelpers.centersApiRoute}/params?token=${token}`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Center id is not a number');\n          done();\n        });\n    });\n\n    it('should return an error response with missing title field for updating a center', () => {\n      request.post(`${testHelpers.centersApiRoute}/${centerId}?token=${token}`)\n        .send({\n          title: '',\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return an error response with missing location field for updating a center', () => {\n      request.post(`${testHelpers.centersApiRoute}/${centerId}?token=${token}`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: '',\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return an error response with missing description field for updating a center', () => {\n      request.post(`${testHelpers.centersApiRoute}/${centerId}?token=${token}`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: '',\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return an error response with missing capacity field for updating a center', () => {\n      request.post(`${testHelpers.centersApiRoute}/${centerId}?token=${token}`)\n        .send({\n          title: testHelpers.democenterTitle,\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: '',\n          price: testHelpers.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return 200 response for finally updating a center', () => {\n      request.post(`${testHelpers.centersApiRoute}/${centerId}?token=${token}`)\n        .send({\n          title: 'A descriptive title for a center',\n          img_url: testHelpers.demoCenterImg,\n          location: testHelpers.democenterLocation,\n          description: testHelpers.demoCenterDescrp,\n          facilities: testHelpers.demoCenterFacilities,\n          capacity: testHelpers.democenterCapacity,\n          price: 200000\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return 401 for trying to delete a center with an id parameter but no token', (done) => {\n      request.delete(`${testHelpers.centersApiRoute}/${centerId}`)\n        .end((err, res) => {\n          expect(res.status).to.equal(401);\n          expect(res.body).to.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Unauthorized user, You need to sign in');\n        });\n      done();\n    });\n\n    it('should return 400 for trying to delete a center without authorization', (done) => {\n      request.delete(`${testHelpers.centersApiRoute}/2000`)\n        .end((err, res) => {\n          expect(res.status).to.equal(401);\n          expect(res.body).to.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('Unauthorized user, You need to sign in');\n        });\n      done();\n    });\n\n    it('should return 200 for succesfully deleting this user', (done) => {\n      decodedToken = jwtDecode(token);\n      request.post('/admin/users')\n        .send({\n          userId: decodedToken.id\n        })\n        .end((err, res) => {\n          expect(res.body).to.be.an('object');\n          expect(res.status).to.equal(200);\n          expect(res.body).to.haveOwnProperty('message').to.equal('User has been deleted successfully');\n          expect(res.body).to.haveOwnProperty('error').to.equal(false);\n        });\n      done();\n    });\n  });\n});\n"]}