{"version":3,"sources":["../../server/test/center.test.js"],"names":["request","expect","testConstants","process","env","DATA_LIMIT","describe","decodedToken","token","centerId","beforeEach","TOKEN","it","post","centersApiRoute","send","title","democenterTitle","img_url","demoCenterImg","location","democenterLocation","description","demoCenterDescrp","facilities","demoCenterFacilities","capacity","democenterCapacity","price","demoCenterPrice","end","err","res","status","to","equal","body","be","an","haveOwnProperty","done","set","get","rand5","Math","floor","random","centers","length","centerLength","deep","meta","centerCount","centId","put","delete","statusCode"],"mappings":"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","file":"center.test.js","sourcesContent":["/* global describe, it */\n\nimport chai from \"chai\";\nimport jwtDecode from \"jwt-decode\";\nimport supertest from \"supertest\";\nimport app from \"../app\";\nimport testInit from \"./testInit\";\n\nconst request = supertest(app);\nconst { expect } = chai;\nconst testConstants = new testInit();\nprocess.env.DATA_LIMIT = 30;\n\ndescribe(\"Test center API\", () => {\n  let decodedToken;\n  let token;\n  let centerId;\n\n  describe(\"Creating a new center\", () => {\n    beforeEach(() => {\n      token = process.env.TOKEN;\n    });\n\n    it(\"should return 401 error response for no token\", done => {\n      request\n        .post(testConstants.centersApiRoute)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(401);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"Unauthorized user, You need to sign in\");\n          done();\n        });\n    });\n\n    it(\"should return 401 error response for a invalid token\", done => {\n      request\n        .post(`${testConstants.centersApiRoute}?token=undefined`)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(401);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"Failed to authenticate token, please sign in\");\n          done();\n        });\n    });\n\n    it(\"should return 400 response for an empty title field\", done => {\n      request\n        .post(testConstants.centersApiRoute)\n        .set(\"x-access-token\", token)\n        .send({\n          title: \"\",\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"a required field is missing\");\n          done();\n        });\n    });\n\n    it(\"should return 400 response for an empty location field\", done => {\n      request\n        .post(testConstants.centersApiRoute)\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: \"\",\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"a required field is missing\");\n          done();\n        });\n    });\n\n    it(\"should return 400 response for an empty description field\", done => {\n      request\n        .post(testConstants.centersApiRoute)\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: \"\",\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"a required field is missing\");\n          done();\n        });\n    });\n\n    it(\"should return 400 response if facility field is not an array\", done => {\n      request\n        .post(testConstants.centersApiRoute)\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: \"swimming pool, parking lot, stage\",\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"a required field is missing\");\n          done();\n        });\n    });\n\n    it(\"should return 400 response if capacity field is empty\", done => {\n      request\n        .post(testConstants.centersApiRoute)\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: \"\",\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"a required field is missing\");\n          done();\n        });\n    });\n\n    it(\"should return 400 response if price field is empty\", done => {\n      request\n        .post(testConstants.centersApiRoute)\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: \"\"\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"a required field is missing\");\n          done();\n        });\n    });\n\n    it(\"should create center and return 201 response for a valid token\", done => {\n      request\n        .post(testConstants.centersApiRoute)\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(201);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"Center has been created\");\n          done();\n        });\n    });\n\n    it('should create center and return 400 response for \"center all ready exist\"', done => {\n      request\n        .post(testConstants.centersApiRoute)\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"Center already exist\");\n          done();\n        });\n    });\n\n    it(\"should return 200 response for getting all centers\", done => {\n      request.get(`${testConstants.centersApiRoute}`).end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body).to.haveOwnProperty(\"meta\");\n        expect(res.body)\n          .to.haveOwnProperty(\"message\")\n          .to.equal(\"Successful Center!\");\n        let rand5 = Math.floor(Math.random() * res.body.centers.length + 1);\n        centerId = rand5;\n        done();\n      });\n    });\n\n    it(\"should return 200 response for getting search result for centers but centers array will be empty\", done => {\n      process.env.DATA_LIMIT = 30;\n      request\n        .get(`${testConstants.centersApiRoute}?search=tfniurhaefidcekubifr`)\n        .end((err, res) => {\n          let centerLength = res.body.centers.length;\n          expect(res.status).to.equal(200);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"centers\")\n            .to.deep.equal([]);\n          expect(res.body.centers.length).to.equal(centerLength);\n          done();\n        });\n    });\n\n    it(\"should return 200 response for getting search result for centers with filters by capacity\", done => {\n      request\n        .get(`${testConstants.centersApiRoute}?filter=capacity&search=2000`)\n        .end((err, res) => {\n          expect(res.status).to.equal(200);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"meta\")\n            .to.be.an(\"object\");\n        });\n      done();\n    });\n\n    it(\"should return 200 response for getting search result for centers with filters by price\", done => {\n      request\n        .get(`${testConstants.centersApiRoute}?filter=price&search=200000`)\n        .end((err, res) => {\n          let meta = res.body.meta;\n          expect(res.status).to.equal(200);\n          expect(res.body).to.be.an(\"object\");\n          expect(meta)\n            .to.haveOwnProperty(\"totalCount\")\n            .to.equal(0);\n        });\n      done();\n    });\n\n    it(\"should return 200 response for getting search result for centers with filters by location\", done => {\n      request\n        .get(`${testConstants.centersApiRoute}?filter=location&search=`)\n        .end((err, res) => {\n          let centerCount = res.body.centers.length;\n          expect(res.status).to.equal(200);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"meta\")\n            .to.be.an(\"object\");\n        });\n      done();\n    });\n\n    it(\"should return 400 response for getting one center with wrong id parameter\", done => {\n      request\n        .get(`${testConstants.centersApiRoute}/wrongidparam`)\n        .end((err, res) => {\n          done();\n        });\n    });\n\n    it('should return 404 response for getting one center with \"Center with id: <centerId> does not exist\"', done => {\n      let centId = 200;\n      request\n        .get(`${testConstants.centersApiRoute}/${centId}`)\n        .end((err, res) => {\n          expect(res.status).to.equal(404);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(`Center with id: ${centId} does not exist`);\n          done();\n        });\n    });\n\n    it(\"should return 200 response for getting one center\", done => {\n      request\n        .get(`${testConstants.centersApiRoute}/${centerId}`)\n        .end((err, res) => {\n          expect(res.status).to.equal(200);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(`Center with id: ${centerId} was found`);\n          done();\n        });\n    });\n\n    it('should return 404 response with \"center not found\" for trying to updating a center', done => {\n      request\n        .put(testConstants.centersApiRoute + \"/900\")\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(404);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"Center with the id of 900 was not Found\");\n          done();\n        });\n    });\n\n    it(\"should return 400 response for a invalid id parameter when trying to update a center\", done => {\n      request\n        .put(`${testConstants.centersApiRoute}/params`)\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"Center id is not a number\");\n          done();\n        });\n    });\n\n    it(\"should return an error response with missing title field for updating a center\", () => {\n      request\n        .put(`${testConstants.centersApiRoute}/${centerId}`)\n        .set(\"x-access-token\", token)\n        .send({\n          title: \"\",\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"a required field is missing\");\n          done();\n        });\n    });\n\n    it(\"should return an error response with missing location field for updating a center\", () => {\n      request\n        .put(`${testConstants.centersApiRoute}/${centerId}`)\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: \"\",\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"a required field is missing\");\n          done();\n        });\n    });\n\n    it(\"should return an error response with missing description field for updating a center\", () => {\n      request\n        .put(`${testConstants.centersApiRoute}/${centerId}`)\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: \"\",\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"a required field is missing\");\n          done();\n        });\n    });\n\n    it(\"should return an error response with missing capacity field for updating a center\", () => {\n      request\n        .put(`${testConstants.centersApiRoute}/${centerId}`)\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: \"\",\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"a required field is missing\");\n          done();\n        });\n    });\n\n    it(\"should return 200 response for finally updating a center\", () => {\n      request\n        .put(`${testConstants.centersApiRoute}/${centerId}`)\n        .set(\"x-access-token\", token)\n        .send({\n          title: \"A descriptive title for a center\",\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: 200000\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"a required field is missing\");\n          done();\n        });\n    });\n\n    it(\"should return 401 for trying to delete a center with an id parameter but no token\", done => {\n      request\n        .delete(`${testConstants.centersApiRoute}/${centerId}`)\n        .end((err, res) => {\n          expect(res.status).to.equal(401);\n          expect(res.body).to.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"Unauthorized user, You need to sign in\");\n        });\n      done();\n    });\n\n    it(\"should return 400 for trying to delete a center without authorization\", done => {\n      request\n        .delete(`${testConstants.centersApiRoute}/2000`)\n        .end((err, res) => {\n          expect(res.status).to.equal(401);\n          expect(res.body).to.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"Unauthorized user, You need to sign in\");\n        });\n      done();\n    });\n\n    it(\"should return 200 for successfully deleting a center with token\", done => {\n      request\n        .delete(`${testConstants.centersApiRoute}/${centerId}`)\n        .set(\"x-access-token\", token)\n        .end((err, res) => {\n          expect(res.status).to.equal(200);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"center\")\n            .to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.equal(\"This Center has been deleted\");\n        });\n      done();\n    });\n\n    it(\"should create another center and return 201 response for a valid token\", done => {\n      request\n        .post(testConstants.centersApiRoute)\n        .set(\"x-access-token\", token)\n        .send({\n          title: testConstants.democenterTitle,\n          img_url: testConstants.demoCenterImg,\n          location: testConstants.democenterLocation,\n          description: testConstants.demoCenterDescrp,\n          facilities: testConstants.demoCenterFacilities,\n          capacity: testConstants.democenterCapacity,\n          price: testConstants.demoCenterPrice\n        })\n        .end((err, res) => {\n          expect(res.body.statusCode).to.deep.equal(201);\n          expect(res.body).to.be.an(\"object\");\n          expect(res.body)\n            .to.haveOwnProperty(\"message\")\n            .to.deep.equal(\"Center has been created\");\n        });\n      done();\n    });\n  });\n});\n"]}