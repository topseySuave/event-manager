{"version":3,"sources":["../../server/test/users.test.js"],"names":["request","expect","testConstants","describe","adminId","userId","adminToken","firstName","lastName","adminFirstName","adminLastName","it","done","post","usersApiRoute","send","email","demoUserEmail","password","demoUserPassword","end","err","res","status","to","equal","body","be","an","haveOwnProperty","constMailAddr","constPass","id","process","env","TOKEN","token"],"mappings":"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","file":"users.test.js","sourcesContent":["/* global describe, it */\n\nimport chai from 'chai';\nimport supertest from 'supertest';\nimport faker from 'faker';\nimport jwtDecode from 'jwt-decode';\nimport app from '../app';\nimport testInit from './testInit';\n\nconst request = supertest(app);\nconst { expect } = chai;\nconst testConstants = new testInit();\n\ndescribe('Test user API', () => {\n  let adminId;\n  let userId;\n  let adminToken;\n\n  describe('Creating a new admin or user', () => {\n    let firstName = testConstants.firstName;\n    let lastName = testConstants.lastName;\n    let adminFirstName = testConstants.adminFirstName;\n    let adminLastName = testConstants.adminLastName;\n\n    it('should return a status 400 error response for a empty firstName field', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          firstName: '',\n          lastName,\n          email: testConstants.demoUserEmail,\n          password: testConstants.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response for a empty firstName field is only spaces', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          firstName: '            ',\n          lastName,\n          email: testConstants.demoUserEmail,\n          password: testConstants.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response for a empty lastName field', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          firstName,\n          lastName: '',\n          email: testConstants.demoUserEmail,\n          password: testConstants.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n    it('should return a status 400 error response for a empty lastName field is only spaces', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          firstName,\n          lastName: '             ',\n          email: testConstants.demoUserEmail,\n          password: testConstants.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response for a empty email field', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: '',\n          password: testConstants.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response for a empty email field is only spaces', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: '            ',\n          password: testConstants.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response if email is not correct', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: 'testConstants.demoUserEmail',\n          password: testConstants.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response if password is empty', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: testConstants.demoUserEmail,\n          password: ''\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response if password field is only spaces', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: testConstants.demoUserEmail,\n          password: '          '\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should create a user ', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: testConstants.constMailAddr,\n          password: testConstants.constPass\n        })\n        .end((err, res) => {\n          userId = res.body.id;\n          expect(res.status).to.equal(201);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal(`Account Created for ${firstName} ${lastName}`);\n        });\n      done();\n    });\n\n    it('should return 201 response for creaqting another user', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          firstName,\n          lastName,\n          email: testConstants.constMailAddr,\n          password: testConstants.constPass\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(201);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal(`Account Created for ${firstName} ${lastName}`);\n          done();\n        });\n    });\n  });\n\n  describe('Test to sign a user and/or admin in/out', () => {\n    it('should return a status 400 error response if email is empty', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          email: '',\n          password: testConstants.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response if email field is only spaces', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          email: '          ',\n          password: testConstants.demoUserPassword\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response if password is empty', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          email: testConstants.constMailAddr,\n          password: ''\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 400 error response if password field is only spaces', (done) => {\n      request.post(testConstants.usersApiRoute)\n        .send({\n          email: testConstants.constMailAddr,\n          password: '         '\n        })\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.haveOwnProperty('message').to.equal('a required field is missing');\n          done();\n        });\n    });\n\n    it('should return a status 200 success response for logging in a user', (done) => {\n      request.post(`${testConstants.usersApiRoute}/authentication`)\n        .send({\n          email: testConstants.constMailAddr,\n          password: testConstants.constPass,\n        })\n        .end((err, res) => {\n          expect(res.body).to.be.an('object');\n          expect(res.status).to.equal(200);\n          expect(res.body).to.haveOwnProperty('token');\n          expect(res.body).to.haveOwnProperty('message').to.equal('signin successful');\n          process.env.TOKEN = res.body.token;\n          userId = jwtDecode(process.env.TOKEN).id;\n        });\n      done();\n    });\n  });\n});\n"]}