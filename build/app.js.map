{"version":3,"sources":["../server/app.js"],"names":["config","app","compiler","apiRoute","set","process","env","SECRET_KEY","use","json","limit","urlencoded","extended","parameterLimit","serve","setup","hot","publicPath","output","noInfo","log","console","path","heartbeat","static","join","__dirname","get","req","res","status","sendFile","next","err","send","error","port","parseInt","PORT","server","createServer","listen"],"mappings":"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","file":"app.js","sourcesContent":["import express from 'express';\r\nimport logger from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport http from 'http';\r\nimport path from 'path';\r\nimport cors from 'cors';\r\nimport webpack from 'webpack';\r\nimport webpackHotMiddleware from 'webpack-hot-middleware';\r\nimport swagger from 'swagger-ui-express';\r\nimport dotenv from 'dotenv';\r\nimport swaggerDoc from './docs/swagger';\r\nimport event from './routes/events';\r\nimport center from './routes/centers';\r\nimport users from './routes/users';\r\nimport admin from './routes/administrator';\r\nimport config from '../webpack.config';\r\n// import React from 'react';\r\n// import { renderToString } from 'react-dom/server';\r\n// import { App } from '../client/src/components/homepage';\r\ndotenv.config();\r\n\r\n// Set up the express app\r\nconst app = express();\r\nlet compiler = webpack(config);\r\n\r\n// Init API Route string\r\nconst apiRoute = '/api/v1';\r\n\r\napp.set('superSecret', process.env.SECRET_KEY); // secret variable\r\n\r\n// Parse incoming requests data (https://github.com/expressjs/body-parser)\r\napp.use(bodyParser.json({ limit: '10mb' }));\r\napp.use(bodyParser.urlencoded({ limit: '10mb', extended: true, parameterLimit: 10000 }));\r\n\r\n// Log requests to the console.\r\napp.use(logger('dev'));\r\napp.use(cors());\r\napp.use(apiRoute, center);\r\napp.use(apiRoute, users);\r\napp.use(apiRoute, event);\r\napp.use('/admin', admin);\r\napp.use('/docs', swagger.serve, swagger.setup(swaggerDoc));\r\n\r\napp.use(webpackHotMiddleware(compiler, {\r\n  hot: true,\r\n  publicPath: config.output.publicPath,\r\n  noInfo: true,\r\n  log: console.log,\r\n  path: '/__webpack_hmr',\r\n  heartbeat: 10 * 1000\r\n}));\r\n\r\napp.use(express.static(path.join(__dirname, '../client/public')));\r\napp.set('views', path.join(__dirname, '..', 'client', 'public'));\r\n\r\n// Setup a default catch-all route that sends back the index html file.\r\napp.get('*', (req, res) => {\r\n  // const appString = renderToString(<App />);\r\n  res.status(200).sendFile(path.join(__dirname, '..', 'client/public/index.html'));\r\n});\r\n\r\napp.get('*.js.gz', function (req, res, next) {\r\n    res.set('Content-Encoding', 'gzip');\r\n    res.set('Content-Type', 'application/javascript');\r\n    next();\r\n});\r\napp.get('*.css.gz', function (req, res, next) {\r\n    res.set('Content-Encoding', 'gzip');\r\n    res.set('Content-Type', 'text/css');\r\n    next();\r\n});\r\n\r\napp.use((req, res, next) => {\r\n  const err = res.status(404).send({\r\n    error: '404: Sorry Page Not Found!'\r\n  });\r\n  next(err);\r\n});\r\n\r\nconst port = parseInt(process.env.PORT, 10) || 8000;\r\napp.set('port', port);\r\n\r\nconst server = http.createServer(app);\r\nserver.listen(port, (err) => {\r\n  if (err) console.log(err);\r\n  console.log(`server listening on port ${port}`);\r\n});\r\n"]}