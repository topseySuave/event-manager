{"version":3,"sources":["../server/app.js"],"names":["config","app","compiler","apiRoute","set","process","env","SECRET_KEY","use","json","limit","urlencoded","extended","parameterLimit","serve","setup","hot","publicPath","output","noInfo","log","console","path","heartbeat","static","join","__dirname","get","req","res","status","sendFile","next","err","send","error","port","parseInt","PORT","listen"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,iBAAOA,MAAP;;AAEA;AACA,IAAMC,MAAM,wBAAZ;AACA,IAAIC,WAAW,yCAAf;;AAEA;AACA,IAAMC,WAAW,SAAjB;;AAEAF,IAAIG,GAAJ,CAAQ,aAAR,EAAuBC,QAAQC,GAAR,CAAYC,UAAnC,E,CAAgD;;AAEhD;AACAN,IAAIO,GAAJ,CAAQ,qBAAWC,IAAX,CAAgB,EAAEC,OAAO,MAAT,EAAhB,CAAR;AACAT,IAAIO,GAAJ,CAAQ,qBAAWG,UAAX,CAAsB,EAAED,OAAO,MAAT,EAAiBE,UAAU,IAA3B,EAAiCC,gBAAgB,KAAjD,EAAtB,CAAR;;AAEA;AACAZ,IAAIO,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAP,IAAIO,GAAJ,CAAQL,QAAR;AACAF,IAAIO,GAAJ,CAAQL,QAAR;AACAF,IAAIO,GAAJ,CAAQL,QAAR;AACAF,IAAIO,GAAJ,CAAQ,QAAR;AACAP,IAAIO,GAAJ,CAAQ,OAAR,EAAiB,2BAAQM,KAAzB,EAAgC,2BAAQC,KAAR,mBAAhC;;AAEAd,IAAIO,GAAJ,CAAQ,oCAAqBN,QAArB,EAA+B;AACrCc,OAAK,IADgC;AAErCC,cAAY,kBAAOC,MAAP,CAAcD,UAFW;AAGrCE,UAAQ,IAH6B;AAIrCC,OAAKC,QAAQD,GAJwB;AAKrCE,QAAM,gBAL+B;AAMrCC,aAAW,KAAK;AANqB,CAA/B,CAAR;;AASAtB,IAAIO,GAAJ,CAAQ,kBAAQgB,MAAR,CAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,kBAArB,CAAf,CAAR;AACAzB,IAAIG,GAAJ,CAAQ,OAAR,EAAiB,eAAKqB,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,QAA3B,EAAqC,QAArC,CAAjB;;AAEA;AACAzB,IAAI0B,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,QAAhB,CAAyB,eAAKN,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,0BAA3B,CAAzB;AACD,CAFD;;AAIAzB,IAAIO,GAAJ,CAAQ,UAACoB,GAAD,EAAMC,GAAN,EAAWG,IAAX,EAAoB;AAC1B,MAAMC,MAAMJ,IAAIC,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAC/BC,WAAO;AADwB,GAArB,CAAZ;AAGAH,OAAKC,GAAL;AACD,CALD;;AAOA,IAAMG,OAAOC,SAAShC,QAAQC,GAAR,CAAYgC,IAArB,EAA2B,EAA3B,KAAkC,IAA/C;AACArC,IAAIG,GAAJ,CAAQ,MAAR,EAAgBgC,IAAhB;;AAEAnC,IAAIsC,MAAJ,CAAWH,IAAX,EAAiB,UAACH,GAAD,EAAS;AACxB,MAAIA,GAAJ,EAASZ,QAAQD,GAAR,CAAYa,GAAZ;AACTZ,UAAQD,GAAR,+BAAwCgB,IAAxC;AACD,CAHD;;kBAKenC,G","file":"app.js","sourcesContent":["import express from 'express';\nimport logger from 'morgan';\nimport bodyParser from 'body-parser';\nimport http from 'http';\nimport path from 'path';\nimport webpack from 'webpack';\nimport webpackHotMiddleware from 'webpack-hot-middleware';\nimport swagger from 'swagger-ui-express';\nimport dotenv from 'dotenv';\nimport swaggerDoc from './docs/swagger';\nimport event from './routes/events';\nimport center from './routes/centers';\nimport users from './routes/users';\nimport admin from './routes/administrator';\nimport config from '../webpack.config';\n\ndotenv.config();\n\n// Set up the express app\nconst app = express();\nlet compiler = webpack(config);\n\n// Init API Route string\nconst apiRoute = '/api/v1';\n\napp.set('superSecret', process.env.SECRET_KEY); // secret variable\n\n// Parse incoming requests data (https://github.com/expressjs/body-parser)\napp.use(bodyParser.json({ limit: '10mb' }));\napp.use(bodyParser.urlencoded({ limit: '10mb', extended: true, parameterLimit: 10000 }));\n\n// Log requests to the console.\napp.use(logger('dev'));\napp.use(apiRoute, center);\napp.use(apiRoute, users);\napp.use(apiRoute, event);\napp.use('/admin', admin);\napp.use('/docs', swagger.serve, swagger.setup(swaggerDoc));\n\napp.use(webpackHotMiddleware(compiler, {\n  hot: true,\n  publicPath: config.output.publicPath,\n  noInfo: true,\n  log: console.log,\n  path: '/__webpack_hmr',\n  heartbeat: 10 * 1000\n}));\n\napp.use(express.static(path.join(__dirname, '../client/public')));\napp.set('views', path.join(__dirname, '..', 'client', 'public'));\n\n// Setup a default catch-all route that sends back the index html file.\napp.get('*', (req, res) => {\n  res.status(200).sendFile(path.join(__dirname, '..', 'client/public/index.html'));\n});\n\napp.use((req, res, next) => {\n  const err = res.status(404).send({\n    error: '404: Sorry Page Not Found!'\n  });\n  next(err);\n});\n\nconst port = parseInt(process.env.PORT, 10) || 8000;\napp.set('port', port);\n\napp.listen(port, (err) => {\n  if (err) console.log(err);\n  console.log(`server listening on port ${port}`);\n});\n\nexport default app;\n"]}