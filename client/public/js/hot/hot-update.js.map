{"version":3,"file":"./hot/hot-update.js","sources":["webpack:///client/src/components/centerComponent/centerDetail/RecommCenter.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport shortid from 'shortid';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { CircularLoader } from '../../loader';\nimport Helpers from '../../../helpers';\nimport CenterCard from '../centerCard/centerCard';\n\n/**\n * RecommCenter Class Component\n * */\nclass RecommCenter extends Component {\n  /**\n   * RecommCenter Class Constructor\n   * @param { object } props\n   * */\n  constructor(props) {\n    super(props);\n    this.helper = new Helpers();\n    this.state = {\n      isLoading: true,\n      error: false,\n      noCenter: 'There are no related centers',\n      errorMessage: '',\n      relatedCenters: []\n    };\n  }\n\n  /**\n   * componentWillMount Method\n   * @return { void }\n   * */\n  componentWillMount() {\n    this.fetchCenter(this.props.relatedCenterBasedOn);\n  }\n\n  /**\n   * componentWillReceiveProps Method\n   * @param { object } newProps\n   * @return { void }\n   * */\n  componentWillReceiveProps(newProps) {\n    this.fetchCenter(newProps.relatedCenterBasedOn);\n  }\n\n  /**\n   * fetchCenter Method\n   * @param { object } relatedCenters\n   * @return { void }\n   * */\n  fetchCenter(relatedCenters) {\n    this.props.fetchCenterRelatedTo(relatedCenters)\n      .then(({ data }) => {\n        this.setState({ isLoading: false, relatedCenters: data.centers });\n      })\n      .catch(() => {\n        this.setState({\n          isLoading: false,\n          error: true,\n          errorMessage: this.state.noCenter\n        });\n      });\n  }\n\n  /**\n   * sortAndShowRecommended Method\n   * @return { component }\n   * */\n  sortAndShowRecommended() {\n    if (!isEmpty(this.state.relatedCenters)) {\n      return this.state.relatedCenters.map((center, index) => {\n        const to = `/center/${center.id}/${this.helper\n          .sanitizeString(center.title)}`;\n        return (\n          <div className=\"col s12 l4\" key={shortid.generate()}>\n            <CenterCard to={to} center={center} />\n          </div>\n        );\n      });\n    }\n    return (\n      <p>{ this.state.noCenter }</p>\n    );\n  }\n\n  /**\n   * render Method\n   * @return { component }\n   * */\n  render() {\n    const {\n      isLoading, error, errorMessage\n    } = this.state;\n    const eachCenter = this.sortAndShowRecommended();\n    return (\n      <div className=\"row\">\n        <div className=\"divider\" />\n        <h5 style={{ marginLeft: '10px' }}>Recommended Center</h5>\n        { isLoading ? <CircularLoader /> : (\n          <div className=\"row\">\n            { (error) ? errorMessage :\n              (isEmpty(eachCenter)) ? this.state.noCenter : eachCenter }\n          </div>\n        )\n        }\n      </div>\n    );\n  }\n}\n\nRecommCenter.propTypes = {\n  relatedCenterBasedOn: PropTypes.object.isRequired,\n  fetchCenterRelatedTo: PropTypes.func.isRequired\n};\n\nexport default RecommCenter;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;AAAA;AACA;;;AACA;AACA;AAAA;AACA;;;AAAA;AACA;;;;;;;;;;;AACA;;;AAGA;;;AACA;;;;AAIA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AAUA;AACA;AACA;;;;;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;;;;;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAJA;AAYA;;;;;;AAGA;AACA;AACA;AAFA;AACA;AAIA;;;;A","sourceRoot":""}