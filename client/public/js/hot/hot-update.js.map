{"version":3,"file":"./hot/hot-update.js","sources":["webpack:///client/src/actions/searchAction.js"],"sourcesContent":["import axios from 'axios';\nimport { isEmpty } from 'lodash';\nimport queryString from 'query-string';\nimport {\n  fetchCentersDispatch,\n  searchCenterDispatch\n} from './center-actions/fetchCenterAction';\nimport { searchEventsDispatch } from './events-actions/index';\nimport {\n  SEARCH_CENTER_TITLE_FAILED,\n  SEARCH_EVENT_TITLE_FAILED,\n  FETCH_CENTERS\n} from './';\n\nconst prepareCenterSearchQuery = (searchVal) => {\n  let searchObjectString, searchApi, api = '/api/v1/centers?';\n  searchObjectString = queryString.stringify(searchVal, {\n    arrayFormat: 'bracket'\n  });\n  searchApi = `${api}${searchObjectString}`;\n  return searchApi;\n};\n\nconst validateEventSearchQuery = ({ searchBy, search }) => {\n  let searchApi, api;\n\n  if (searchBy) {\n    api = `/api/v1/events?searchBy=${searchBy}&search=`;\n  } else {\n    api = '/api/v1/events?search=';\n  }\n\n  if (!isEmpty(search) && search !== 'undefined') {\n    searchApi = `${api + search}`;\n  }\n\n  return searchApi;\n};\n\nexport const searchAction = (searchQueries) => {\n  let searchApi = prepareCenterSearchQuery(searchQueries);\n  return dispatch => axios\n    .get(searchApi)\n    .then(({ data }) => {\n      console.log('data ===> ', data);\n      if (data.statusCode === 200) {\n        return dispatch(fetchCentersDispatch(data, FETCH_CENTERS));\n      } else if (data.statusCode === 404) {\n        console.log('error dey 404');\n        if (err) {\n          console.log('has error');\n          Materialize.toast(\n            'search result do not match center(s)',\n            5000,\n            'red'\n          );\n        }\n      }\n    })\n    .catch((err) => {\n      if (err) {\n        console.log('error dey oooo');\n        Materialize.toast(\n          'search result do not match center(s)',\n          5000,\n          'red'\n        );\n      }\n    });\n};\n\nexport const filterCenterTitle = value => (dispatch) => {\n  let searchApi = prepareCenterSearchQuery(value, 'title');\n  return axios.get(searchApi).then(({ data }) => {\n    if (data.statusCode === 200) {\n      dispatch(searchCenterDispatch(data));\n    } else if (data.statusCode === 404) {\n      Materialize.toast(data.message, 5000, 'red');\n      dispatch(searchCenterDispatch(null, 'SEARCH_CENTER_TITLE_FAILED'));\n    }\n  });\n};\n\nexport const filterEventTitle = value => (dispatch) => {\n  let searchApi = validateEventSearchQuery(value);\n  return axios.get(searchApi).then(({ data }) => {\n    if (data.statusCode === 200) {\n      dispatch(searchEventsDispatch(data.events));\n    } else if (data.statusCode === 400) {\n      Materialize.toast(data.message, 5000, 'red');\n      dispatch({\n        type: SEARCH_EVENT_TITLE_FAILED\n      });\n    }\n  });\n};\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;;;AAAA;AACA;AAAA;AACA;;;AAAA;AACA;AAGA;AACA;AAAA;AACA;;;;;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AANA;AACA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AAGA;AACA;AADA;AACA;AAGA;AACA;AADA;AAbA;AACA;AAeA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAMA;AACA;AAjBA;AAmBA;AACA;AACA;AAMA;AA3BA;AAAA;AAFA;AACA;AA+BA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAEA;AAPA;AAFA;AAAA;AACA;AAWA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;;AACA;AAAA;AAIA;AATA;AAFA;AAAA;;;;A","sourceRoot":""}