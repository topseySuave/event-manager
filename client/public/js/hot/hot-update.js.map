{"version":3,"file":"./hot/hot-update.js","sources":["webpack:///client/src/helpers/authCheck.js"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport jwtDecode from 'jwt-decode';\nimport { store } from '../';\nimport setAuthorizationToken from '../components/authentication/setAuthenticationToken';\nimport { setCurrentUser, signOutRequest } from '../actions/authActions';\n\n/**\n * AuthCheck Class\n * */\nexport default class AuthCheck {\n  /**\n   * jwtIsSet Method\n   * @return { boolean }\n   * */\n  jwtIsSet() {\n    return !!localStorage.getItem('jwtToken');\n  }\n\n  /**\n   * isSignedIn Method\n   * @return { void }\n   * */\n  isSignedIn() {\n    if (this.jwtIsSet()) {\n      jwt.verify(\n        localStorage.getItem('jwtToken'),\n        process.env.SECRET_KEY,\n        (err, decoded) => {\n          if (err) {\n            store.dispatch(signOutRequest());\n          } else {\n            setAuthorizationToken(localStorage.getItem('jwtToken'));\n            store.dispatch(setCurrentUser(localStorage.getItem('jwtToken')));\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * isAdmin Method\n   * @return { boolean }\n   * */\n  isAdmin() {\n    if (this.jwtIsSet()) {\n      if (jwtDecode(localStorage.getItem('jwtToken')).role) return true;\n    }\n    return false;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// client/src/helpers/authCheck.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;AAAA;AACA;;;AAAA;AACA;;;;;;;;;;;AACA;;;AAGA;;;;;;AACA;AACA;;;;;AAGA;AACA;AAGA;AACA;;;;;;;;AAGA;AACA;AACA;AAIA;AACA;AADA;AAGA;AACA;AAEA;AAVA;AAaA;AAEA;AACA;;;;;;;;AAGA;AACA;AACA;AAEA;AAAA;;;;;;;AAtCA;;;;A","sourceRoot":""}